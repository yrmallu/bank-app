#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby27Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-533,609,287,609,609,-108,287,-533,-533,-533,841,609,-533,-533,-533',
'287,-533,237,655,-102,841,3,227,228,-533,-533,-533,-533,-533,658,130',
'233,-533,-94,126,129,-533,-533,283,-533,-533,-533,-533,-533,840,-109',
'-116,-104,609,-115,871,-80,97,238,840,897,235,616,-111,-113,98,772,-108',
'-109,-116,-115,224,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533',
'-533,-533,-533,-533,654,-110,-533,-533,-533,-102,-533,-533,289,-101',
'-533,657,289,-533,-533,234,-533,-107,-533,225,-533,289,-533,-533,-533',
'-533,-533,-533,-533,-99,-533,238,-533,-104,130,-116,130,130,-103,129',
'-102,129,129,-102,130,-533,-533,-533,-533,129,-533,-536,-533,-111,-113',
'-112,-110,-533,-536,-536,-536,-102,-533,-536,-536,-536,-533,-536,-104',
'-100,-107,-104,226,-106,870,-536,-101,-536,-536,-536,130,130,-102,-104',
'981,129,129,-536,-536,-104,-536,-536,-536,-536,-536,-108,-109,-116,-115',
'-112,-108,-109,-116,-115,-634,-103,-101,108,109,229,-114,-101,227,228',
'-101,-114,227,228,-536,-536,-536,-536,-536,-536,-536,-536,-536,-536',
'-536,-536,-536,-536,-101,-634,-536,-536,-536,278,-536,-536,-103,-547',
'-536,-103,287,-536,-536,860,-536,340,-536,639,-536,861,-536,-536,-536',
'-536,-536,-536,-536,-103,-536,341,-536,-634,130,-111,-113,-112,-110',
'129,-111,-113,-112,-110,-635,-536,-536,-536,-536,238,-536,-310,-536',
'639,110,111,644,-536,-310,-310,-310,-635,-536,377,-310,-310,-536,-310',
'233,-108,238,-536,-103,738,238,232,737,-442,-536,-631,641,640,637,-105',
'230,784,-548,-310,-310,785,-310,-310,-310,-310,-310,108,109,-114,401',
'289,404,712,-114,482,406,589,409,586,585,584,-543,587,426,235,641,640',
'-632,-543,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310',
'-310,-310,-533,234,-310,-310,-310,431,682,-533,-213,481,-310,483,-631',
'-310,-109,639,-533,639,-310,484,-310,832,-310,-310,-310,-310,-310,-310',
'-310,594,-310,-116,-310,237,-631,513,833,-536,639,292,597,-116,110,111',
'-536,-310,-310,-638,-105,-632,-310,890,676,-536,-638,-638,-638,-310',
'526,594,-638,-638,-310,-638,738,-533,-114,740,-115,-547,597,-632,-638',
'605,604,-638,641,640,641,640,637,-111,677,-638,-638,802,-638,-638,-638',
'-638,-638,589,529,586,585,584,-113,587,-542,641,640,531,-536,605,604',
'-542,933,598,926,-79,738,-99,-111,740,-638,-638,-638,-638,-638,-638',
'-638,-638,-638,-638,-638,-638,-638,-638,-638,-108,-638,-638,-638,238',
'683,-638,-544,598,-638,541,-634,-638,-113,-544,-638,819,-638,542,-638',
'549,-638,-638,-638,-638,-638,-638,-638,295,-638,-638,-638,-354,-638',
'233,-545,-546,-110,238,-354,1031,479,-545,-546,-638,-638,-638,-103,-354',
'-638,480,-545,-546,-638,-638,-638,-638,292,-638,-638,-638,-638,-638',
'233,-638,-112,738,-548,-541,740,548,-638,-638,-638,-638,-541,-110,-301',
'238,546,552,1063,-638,-638,-301,-638,-638,-638,-638,-638,558,233,258',
'-301,238,-538,233,-354,557,234,-545,-546,-538,620,-539,130,639,480,616',
'-100,129,-539,618,-638,-638,-638,-638,-638,-638,-638,-638,-638,-638',
'-638,-638,-638,-638,-109,234,-638,-638,-638,233,834,-638,227,228,-638',
'419,669,-638,-638,-301,-638,621,-638,622,-638,667,-638,-638,-638,-638',
'-638,-638,-638,234,-638,-638,-638,589,234,586,585,584,594,587,641,640',
'642,646,-213,-638,-638,-638,-638,597,-638,-310,-638,676,-540,677,650',
'-638,-310,-310,-310,-540,-638,-310,-310,-310,-112,-310,-311,634,234',
'592,575,227,228,-311,635,-310,-310,-310,602,601,605,604,-311,653,-106',
'-310,-310,656,-310,-310,-310,-310,-310,-102,233,-104,-310,605,604,-311',
'130,787,-115,-310,663,129,-311,-283,-635,639,789,-111,-310,-113,598',
'-311,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310',
'-310,665,-311,-310,-310,-310,-310,835,-310,275,276,-310,639,-310,-310',
'-310,639,-310,-635,-310,666,-310,-310,-310,-310,-310,-310,-310,-310',
'-310,234,-310,-310,-310,589,-311,586,585,584,594,587,641,640,647,274',
'273,-310,-310,-310,-310,597,-310,-310,-310,893,897,819,130,-310,-310',
'-310,-310,129,-310,670,-310,-310,-114,-310,233,238,-310,592,641,640',
'659,1054,641,640,805,233,602,601,605,604,789,674,1060,-310,-310,675',
'-310,-310,-310,-310,-310,1058,233,-101,227,228,893,897,589,1054,586',
'585,584,292,587,130,687,258,789,258,129,-110,598,258,-310,-310,-310',
'-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310,258,234,-310',
'-310,-310,258,682,694,758,238,-310,255,234,-310,703,257,256,761,-310',
'238,-310,238,-310,-310,-310,-310,-310,-310,-310,234,-310,589,-310,586',
'585,584,238,587,589,-94,586,585,584,715,587,-310,-310,-638,-310,238',
'-310,561,726,428,-638,-638,-638,-310,430,429,-638,-638,-310,-638,258',
'727,-114,731,734,758,238,741,-638,258,742,531,758,746,761,749,268,269',
'750,-638,-638,974,-638,-638,-638,-638,-638,1024,752,586,585,584,255',
'587,261,754,257,256,253,254,756,255,259,764,260,257,256,253,254,765',
'-638,-638,-638,-638,-638,-638,-638,-638,-638,-638,-638,-638,-638,-638',
'766,258,-638,-638,-638,589,683,586,585,584,-638,587,768,-638,734,734',
'616,734,-638,791,-638,796,-638,-638,-638,-638,-638,-638,-638,806,-638',
'-638,-638,255,807,-284,820,257,256,253,254,513,513,758,238,-638,-638',
'837,-638,278,-638,8,87,88,89,12,80,-638,846,848,81,82,-638,529,531,85',
'-112,83,84,86,33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120',
'921,922,22,726,923,124,125,671,11,51,10,13,122,121,123,112,62,114,113',
'115,238,116,124,125,292,108,109,292,47,48,46,258,262,263,264,265,275',
'276,270,271,266,267,726,251,252,258,238,268,269,888,43,238,897,36,734',
'238,64,65,258,927,66,-285,38,255,238,261,50,257,256,253,254,274,273',
'259,23,260,932,949,238,105,97,99,100,101,103,726,-283,955,98,106,255',
'272,960,-256,257,256,68,238,749,95,102,104,963,965,110,111,967,969,44',
'45,314,87,88,89,12,80,969,238,975,81,82,734,734,734,85,238,83,84,86',
'33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120,734,238,22',
'991,238,995,-286,671,11,51,316,13,122,121,123,112,62,114,113,115,996',
'116,124,125,749,108,109,999,47,48,46,258,262,263,264,265,275,276,270',
'271,266,267,1002,251,252,1004,1006,268,269,238,43,1008,1020,318,1021',
'1033,64,65,734,734,66,796,38,255,1052,261,50,257,256,253,254,274,273',
'259,23,260,1055,860,1061,105,97,99,100,101,103,1064,969,969,98,106,969',
'272,1069,1033,238,749,68,1079,1081,95,102,104,1083,1085,110,111,1085',
'731,44,45,314,87,88,89,12,80,1033,734,734,81,82,-635,-634,238,85,969',
'83,84,86,33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120,1033',
'1024,22,586,585,584,1108,587,11,51,316,13,122,121,123,112,62,114,113',
'115,1085,116,124,125,1085,108,109,1085,47,48,46,258,262,263,264,265',
'275,276,270,271,266,267,1085,251,252,,,268,269,,43,,,36,,,64,65,,,66',
',38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100',
'101,103,,,,98,106,,272,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87',
'88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,133,134,135,136,137',
'90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265,275,276',
'270,271,266,267,,251,252,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261',
'50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98',
'106,,272,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,',
',81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22',
',,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,258,262,263,264,265,275,276,270,271,266,267,,251,252,,,268',
'269,,43,,,318,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259',
'23,260,,,,105,97,99,100,101,103,,,,98,106,238,272,,,,,68,,,95,102,104',
',,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265',
'275,276,270,271,266,267,,251,252,,,268,269,,43,,,318,,,64,65,,,66,,38',
'255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101',
'103,,,,98,106,,272,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89',
'12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119',
'120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,258,262,263,264,265,275,276,270,271,266,267,,251',
'252,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254',
'274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,272,,,,,68,,',
'95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84',
'86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13',
'122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258,262',
'263,264,265,275,276,270,271,266,267,,251,252,,,268,269,,43,,,36,,,64',
'65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97',
'99,100,101,103,,,,98,106,,272,,,,,68,,,95,102,104,,,110,111,,,44,45',
'314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30',
'118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,258,262,263,264,265,275,276,270,271',
'266,267,,-661,-661,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257',
'256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,',
',,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11',
'51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,258,262,263,264,265,275,276,270,271,266,267,,-661,-661,,,268,269',
',43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23',
'260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,',
',90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265,275',
'276,270,271,266,267,,-661,-661,,,268,269,,43,,,36,,,64,65,,,66,,38,255',
',261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,8,87,88,89,12,80,',
',,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,',
'22,,,,,,11,51,10,13,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,258,262,263,264,265,275,276,270,271,266,267,,-661,-661',
',,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274',
'273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33',
'34,78,79,,,,,,90,31,30,118,117,119,120,,589,22,586,585,584,,587,11,51',
'316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
'258,-661,-661,-661,-661,275,276,,758,-661,-661,,,,,,268,269,,43,,,36',
',,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30',
'118,117,119,120,,589,22,586,585,584,,587,11,51,316,13,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,258,-661,-661,-661,-661',
'275,276,,758,-661,-661,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261',
'50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81',
'82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,589,22',
'586,585,584,,587,11,51,316,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,258,-661,-661,-661,-661,275,276,,758,-661,-661',
',,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274',
'273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33',
'34,78,79,,,,,,90,31,30,118,117,119,120,,589,22,586,585,584,,587,11,51',
'316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
'258,-661,-661,-661,-661,275,276,,758,-661,-661,,,,,,268,269,,43,,,36',
',,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30',
'118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,258,-661,-661,-661,-661,275,276,,,-661',
'-661,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253',
'254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,',
',95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83',
'84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316',
'13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258',
'-661,-661,-661,-661,275,276,,,-661,-661,,,,,,268,269,,43,,,36,,,64,65',
',,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87',
'88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,258,262,263,264,265,275,276,,,266,267,,,,,,268',
'269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259',
'23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265,275',
'276,270,,266,267,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50',
'257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82',
',,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,',
'11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,258,,,,,,,,,,,,,,,,268,269,,43,,,36,,258,64,65,,,66,,38,255,,261',
'50,257,256,253,254,268,269,259,23,260,,,,105,97,99,100,101,103,,,255',
'98,106,,257,256,253,254,,68,,,95,102,104,,,110,111,,,44,45,314,87,88',
'89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,258,,,,,,,,,,,,,,,,268,269,,43,,,36,,,64,65,',
',66,,38,255,,261,50,257,256,253,254,,,,23,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80',
',,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,',
',22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,258,,,,,,,,,,,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255',
',261,50,257,256,253,254,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,',
',,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11',
'51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30',
'118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,',
',66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83',
'84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316',
'13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,',
',,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314',
'87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,',
'38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88',
'89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,',
',,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,10,13,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,',
',,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,-450,110,111',
',,44,45,-450,-450,-450,,,-450,-450,-450,589,-450,586,585,584,594,587',
',,,-450,-450,-450,,,,597,,,,,-450,-450,,-450,-450,-450,-450,-450,,,',
',,,,,,592,,,,,,,,,602,601,605,604,,-450,-450,-450,-450,-450,-450,-450',
'-450,-450,-450,-450,-450,-450,-450,,,-450,-450,-450,,,-450,,292,-450',
',,-450,-450,,-450,598,-450,,-450,,-450,-450,-450,-450,-450,-450,-450',
',-450,-450,-450,,,,,,,,,,,,,-450,-450,-319,-450,,-450,,,,-319,-319,-319',
'-450,,-319,-319,-319,-450,-319,,,,,,,,,,-319,-319,,,,,,,,,-319,-319',
',-319,-319,-319,-319,-319,,,,,,,,,,,,,,,,,,,,,,,,-319,-319,-319,-319',
'-319,-319,-319,-319,-319,-319,-319,-319,-319,-319,,,-319,-319,-319,',
',-319,,295,-319,,,-319,-319,,-319,,-319,,-319,,-319,-319,-319,-319,-319',
'-319,-319,,-319,,-319,,,,,,,,,,,,,-319,-319,,-319,,-319,87,88,89,,80',
',-319,,81,82,,-319,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,302',
',50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112',
'62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,',
',243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100',
'101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89',
',80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120',
',,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,302,,50',
',,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334',
'78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,',
',,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,-302,110,111',
',,44,45,-302,-302,-302,,,-302,-302,-302,589,-302,586,585,584,594,587',
',,,,-302,-302,-302,,,597,,,,,-302,-302,,-302,-302,-302,-302,-302,,,',
',,,,,,592,,,,,,,,,602,601,605,604,,-302,-302,-302,-302,-302,-302,-302',
'-302,-302,-302,-302,-302,-302,-302,,,-302,-302,-302,,,-302,,,-302,,',
'-302,-302,,-302,598,-302,,-302,,-302,-302,-302,-302,-302,-302,-302,',
'-302,,-302,,,,,,,,,,,,,-302,-302,-302,-302,,-302,,-302,,,,,-302,,,,-660',
'-302,87,88,89,12,80,-660,-660,-660,81,82,-660,-660,-660,85,-660,83,84',
'86,33,34,78,79,,-660,-660,-660,,90,31,30,118,117,119,120,-660,-660,22',
'-660,-660,-660,-660,-660,11,51,,13,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,-660,-660,-660,-660,-660,-660,-660,-660,-660',
'-660,-660,-660,-660,-660,,,-660,-660,-660,43,,-660,36,292,-660,64,65',
'-660,-660,66,-660,38,-660,,-660,50,-660,-660,-660,-660,-660,-660,-660',
'23,-660,-660,-660,,105,97,99,100,101,103,,,,98,106,-660,-660,,-660,',
'-660,68,,,95,102,104,-660,,110,111,,-660,44,45,87,88,89,,80,,,,81,82',
',,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,',
',51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,',
',,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78',
'79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,',
',249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,130,,,,,129,68,,,95,102,104,,,110,111,,,44,45,87,88,89,12,80,,,',
'81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22',
',,,,,11,51,10,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,419,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,',
',,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,,13,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,436,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,436',
',,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78',
'79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,',
',249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,',
',,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,',
'249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103',
',,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,',
',81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,238,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82',
',,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64',
'65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84',
'86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64',
'65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84',
'86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99',
'100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304',
',302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308',
'95,102,104,,,110,111,,,44,519,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99',
'100,101,103,,,,98,106,238,,,,,,68,,308,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84',
'86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,,13,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
'561,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,,,50,,,,,,,,248,',
',,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106',
',,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,',
'85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,',
',,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,',
',,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,-639,110,111,,,44,45,-639,-639,-639,,,-639,-639,-639,589,-639,586',
'585,584,594,587,,,,-639,-639,-639,-639,,,597,,,,,-639,-639,,-639,-639',
'-639,-639,-639,,,,,,,,,,592,,,,,,,,,,,605,604,,-639,-639,-639,-639,-639',
'-639,-639,-639,-639,-639,-639,-639,-639,-639,,,-639,-639,-639,,,-639',
',,-639,,,-639,-639,,-639,598,-639,,-639,,-639,-639,-639,-639,-639,-639',
'-639,,-639,-639,-639,589,,586,585,584,594,587,,,,,,-639,-639,-639,-639',
'597,-639,-640,-639,,,,,-639,-640,-640,-640,,-639,-640,-640,-640,,-640',
',,,592,,,,,-640,-640,-640,-640,602,601,605,604,,,,-640,-640,,-640,-640',
'-640,-640,-640,,,,,,,,,,,,,,,,,,,,,,598,,-640,-640,-640,-640,-640,-640',
'-640,-640,-640,-640,-640,-640,-640,-640,,,-640,-640,-640,,,-640,,,-640',
',,-640,-640,,-640,,-640,,-640,,-640,-640,-640,-640,-640,-640,-640,,-640',
'-640,-640,,,,,,,,,,,,,-640,-640,-640,-640,,-640,,-640,,,,,-640,,87,88',
'89,-640,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304',
',302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308',
'95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,-660,110,111,,,44,45,-660,-660,-660,,,-660,-660,-660,589',
'-660,586,585,584,594,587,,,,-660,-660,,,,,597,,,,,-660,-660,,-660,-660',
'-660,-660,-660,,589,,586,585,584,594,587,,592,,,,,,,,597,602,601,605',
'604,,,,,,,,,,,,,-660,,,,,592,,-660,,,,,292,-660,602,601,605,604,,,598',
',,,,,,,,,,916,,,-660,-660,,,,,,,,,,,,,-660,,598,,,-660,87,88,89,,80',
',-660,916,81,82,,-660,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,',
',,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334',
'78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112',
'62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,',
',243,,,249,,,64,65,,,66,,709,,302,,50,,,,,,,,248,,,,,105,305,99,100',
'101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89',
',80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,302',
',50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,12,80,,,',
'81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22',
',,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,419,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,',
',,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,',
',,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334',
'78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248',
',,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90',
'31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,811,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99',
'100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87',
'88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,11,51,,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,',
',,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334',
'78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,',
',,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,709,,302,,50,,,,,,',
',248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,',
',110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62',
'114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103',
',,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,',
',81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,',
',,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,709,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,',
',,,,,68,,308,95,102,104,,,110,111,,,44,519,87,88,89,,80,,,,81,82,,,',
'85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,',
',,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,436,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,709,,,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98',
'106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82',
',,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,',
'47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,',
'68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83',
'84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,',
',122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,',
',,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,',
',249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,',
',,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,',
',,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,302,,50,,,,,,,,248',
',,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,709,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,',
'68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83',
'84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,331',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,,,337,,,,,,',
',,,,,,,,,,,,,327,,,323,,,64,65,,,66,,322,,,,,,,,,,,,,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,,',
'337,,,,,,,,,,,,,,,,,,,,327,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105',
'97,99,100,101,103,,,,98,106,,,,339,,,68,,,95,102,104,,,110,111,87,88',
'89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117',
'119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,,,337,,,,,,,,,,,,,,,,,,,,371,,,36,,,64,65,,,66,,38,,,,,,,',
',,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,249,,,64,65,,',
'66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,544,,,68,,,95',
'102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323',
',,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121',
'123,623,62,114,113,624,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,',
',,,625,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,',
',98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'331,,,122,121,123,623,62,114,113,624,,116,124,125,,108,109,,,,337,,',
',,,,,,,,,,,,,,,,,625,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89',
',80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65,,,66,,,,,,,,,,,,,,,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118',
'117,119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65,,,66,,,,,,',
',,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,',
'110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65',
',,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,1010,,,249',
',,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,',
',,,1017,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,',
',,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'331,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,,,337,,',
',,,,,,,,,,,,,,,,,1010,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,191,202,192,215',
'188,208,198,197,218,219,213,196,195,190,216,220,221,200,189,203,207',
'209,201,194,,,,210,217,212,211,204,214,199,187,206,205,,,,,,186,193',
'184,185,181,182,183,141,143,140,,142,,,,,,,,,175,176,,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,,,,,168,167,,152,174',
'170,169,165,166,160,158,150,173,151,,,179,105,,,,,,,,,,106,,,,,,,,,172',
',,,,180,191,202,192,215,188,208,198,197,218,219,213,196,195,190,216',
'220,221,200,189,203,207,209,201,194,,,,210,217,212,211,204,214,199,187',
'206,205,,,,,,186,193,184,185,181,182,183,141,143,,,142,,,,,,,,,175,176',
',171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,',
',,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,105,,',
',,,,,,,106,,,,,,,,,172,,,,,180,191,202,192,215,188,208,198,197,218,219',
'213,196,195,190,216,220,221,200,189,203,207,209,201,194,,,,210,217,212',
'386,385,387,384,187,206,205,,,,,,186,193,184,185,381,382,383,379,143',
'114,113,380,,116,,,,,,,175,176,,171,153,154,155,162,159,161,,,156,157',
',,,177,178,163,164,,,,,,393,,,,,,,,168,167,,152,174,170,169,165,166',
'160,158,150,173,151,,,179,,,,,,,,,,,,,,,,,,,,172,,,,,180,191,202,192',
'215,188,208,198,197,218,219,213,196,195,190,216,220,221,200,189,203',
'207,209,201,194,,,,210,217,212,211,204,214,199,187,206,205,,,,,,186',
'193,184,185,181,182,183,141,143,416,415,142,,417,,,,,,,175,176,,171',
'153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,,,,,168',
'167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,,,,',
',,,,,,172,,,,,180,191,202,192,215,188,208,198,197,218,219,213,196,195',
'190,216,220,221,200,189,203,207,209,201,194,,,,210,217,212,211,204,214',
'199,187,206,205,,,,,,186,193,184,185,181,182,183,141,143,,,142,,,,,',
',,,175,176,,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,',
'179,105,,,,,,,,,,106,,,,,,,,,172,,,,,180,191,202,192,215,188,208,198',
'197,218,219,213,196,195,190,216,220,221,200,189,203,207,209,201,194',
',,,210,217,212,211,204,214,199,187,206,205,,,,,,186,193,184,185,181',
'182,183,141,143,,,142,,,,,,,,,175,176,,171,153,154,155,162,159,161,',
',156,157,,,,177,178,163,164,,,,,,,,,,,,,,168,167,,152,174,170,169,165',
'166,160,158,150,173,151,,,179,105,,,,,,,,,,106,,,,,,,,,172,,,,,180,191',
'202,192,215,188,208,198,197,218,219,213,196,195,190,216,220,221,200',
'189,203,207,209,201,194,,,,210,217,212,211,204,214,199,187,206,205,',
',,,,186,193,184,185,181,182,183,141,143,,,142,,,,,,,,,175,176,,171,153',
'154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,,,,,168,167',
',152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,459,463',
',,460,,,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,',
',,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160',
'158,150,173,151,,,179,,,,,,,,,,466,470,,,465,,,,,,172,,,175,176,180',
'171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,',
',,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,589,179,586',
'585,584,594,587,,,,,511,463,,,512,597,,,,,172,,,175,176,180,171,153',
'154,155,162,159,161,,,156,157,592,,,177,178,163,164,,,602,601,605,604',
',,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,238',
',,,,,,,598,688,463,,,689,,,,,,172,,,175,176,180,171,153,154,155,162',
'159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174',
'170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,690,470,,,691,,,',
',,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177,178',
'163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150',
'173,151,,,179,,,,,,,,,,719,463,,,720,,,,,,172,,,175,176,180,171,153',
'154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168',
'167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,722',
'470,,,723,,,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157',
',,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166',
'160,158,150,173,151,,,179,,,,,,,,,,688,463,,,689,,,,,,172,,,175,176',
'180,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292',
',,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,',
',,,,,,,690,470,,,691,,,,,,172,,,175,176,180,171,153,154,155,162,159',
'161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170',
'169,165,166,160,158,150,173,151,,,179,,,,,,,,,,779,463,,,780,,,,,,172',
',,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151',
',,179,,,,,,,,,,781,470,,,782,,,,,,172,,,175,176,180,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152',
'174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,813,463,,,814',
',,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177',
'178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,,179,,,,,,,,,,816,470,,,815,,,,,,172,,,175,176,180,171',
'153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,',
',168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,',
',904,470,,,905,,,,,,172,,,175,176,180,171,153,154,155,162,159,161,,',
'156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169',
'165,166,160,158,150,173,151,,,179,,,,,,,,,,511,463,,,512,,,,,,172,,',
'175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151',
',,179,,,,,,,,,,1089,470,,,1088,,,,,,172,,,175,176,180,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152',
'174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,1092,463,,,1093',
',,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177',
'178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,,179,589,,586,585,584,594,587,,,1094,470,,,1095,,,597,',
',172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,592,177,178',
'163,164,,,,,,292,605,604,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,589,179,586,585,584,594,587,,,,,,598,,,,597,,,,,172,,,',
'589,180,586,585,584,594,587,,,,,,,592,,589,597,586,585,584,594,587,602',
'601,605,604,,,,,589,597,586,585,584,594,587,,592,,,,,,,,597,,,605,604',
',,592,,,,589,598,586,585,584,594,587,605,604,,,592,,,,,597,,,,602,601',
'605,604,,,598,589,,586,585,584,594,587,,,,,592,,,598,,597,,,,602,601',
'605,604,,,,,589,598,586,585,584,594,587,,,589,592,586,585,584,594,587',
'597,,,,,605,604,,,597,,589,598,586,585,584,594,587,,,,,592,,,,,597,',
',,592,,605,604,,,,,598,602,601,605,604,,,,,589,592,586,585,584,594,587',
',,,,,605,604,,,597,,589,598,586,585,584,594,587,,,589,598,586,585,584',
'594,587,597,,,,592,,,,,597,,,598,,,605,604,,,,,,592,,,,,,,,,592,,605',
'604,,,,,,,,605,604,,,,,,598,,,,,,,,,,,,,,,,,,598,,,,,,,,,598' ]
        racc_action_table = arr = ::Array.new(27402, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,360,67,361,954,368,332,112,112,112,695,978,112,112,112,697,112,22',
'407,719,847,1,475,475,112,379,112,112,112,410,5,27,379,714,3,5,112,112',
'27,112,112,112,112,112,695,369,372,720,901,621,744,714,94,22,847,1036',
'20,1036,779,780,94,611,1014,1015,1018,1061,13,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,407,902,112,112,112,719,112,112,67,854',
'112,410,332,112,112,27,112,20,112,15,112,697,112,112,112,112,112,112',
'112,368,112,475,112,720,360,20,361,954,722,360,719,361,954,719,978,112',
'112,112,112,978,112,115,112,1092,1093,1094,1106,112,115,115,115,719',
'112,115,115,115,112,115,720,369,372,720,16,621,744,115,854,115,115,115',
'611,901,779,780,901,611,901,115,115,720,115,115,115,115,115,1014,1015',
'1018,1061,781,1014,1015,1018,1061,722,722,902,46,46,18,782,854,729,729',
'854,1095,799,799,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,854,1094,115,115,115,25,115,115,722,241,115,722,29,115,115,730,115',
'40,115,533,115,730,115,115,115,115,115,115,115,722,115,43,115,781,311',
'1092,1093,1094,1106,311,1092,1093,1094,1106,782,115,115,115,115,51,115',
'465,115,399,46,46,399,115,465,465,465,1095,115,75,465,465,115,465,19',
'241,729,380,781,567,799,19,567,29,380,623,533,533,533,782,19,625,242',
'465,465,625,465,465,465,465,465,337,337,1095,101,29,102,533,1095,244',
'103,761,104,761,761,761,381,761,138,443,399,399,624,381,465,465,465',
'465,465,465,465,465,465,465,465,465,465,465,623,19,465,465,465,222,465',
'623,481,243,465,245,623,465,242,648,623,395,465,246,465,688,465,465',
'465,465,465,465,465,746,465,244,465,250,623,284,689,624,804,288,746',
'443,337,337,624,465,465,466,465,624,465,761,813,624,466,466,466,465',
'299,996,466,466,465,466,568,623,465,568,481,41,996,624,466,746,746,904',
'648,648,395,395,395,688,814,466,466,648,466,466,466,466,466,974,300',
'974,974,974,689,974,382,804,804,303,624,996,996,382,836,746,804,317',
'572,41,813,572,466,466,466,466,466,466,466,466,466,466,466,466,466,466',
'904,41,466,466,466,319,466,904,383,996,466,320,904,466,814,383,904,929',
'466,321,466,327,466,466,466,466,466,466,466,330,466,466,466,52,904,240',
'324,325,836,331,52,974,240,324,325,466,466,690,466,52,466,240,324,325',
'690,690,690,466,336,690,690,690,466,690,326,904,466,868,42,384,868,326',
'690,690,690,690,384,929,328,1022,326,338,1022,690,690,328,690,690,690',
'690,690,345,342,347,328,353,385,370,52,342,240,324,325,385,370,386,365',
'397,342,366,42,365,386,370,690,690,690,690,690,690,690,690,690,690,690',
'690,690,690,42,326,690,690,690,442,690,690,17,17,690,367,442,690,690',
'328,690,371,690,373,690,442,690,690,690,690,690,690,690,342,690,690',
'690,358,370,358,358,358,358,358,397,397,397,401,341,690,690,690,690',
'358,690,691,690,459,387,460,404,690,691,691,691,387,690,691,691,691',
'690,691,549,389,442,358,358,359,359,549,389,691,691,691,358,358,358',
'358,549,406,341,691,691,409,691,691,691,691,691,459,627,460,723,749',
'749,785,910,627,341,723,432,910,785,435,723,402,627,459,723,460,358',
'785,691,691,691,691,691,691,691,691,691,691,691,691,691,691,437,549',
'691,691,691,905,691,691,49,49,691,412,905,691,691,651,691,905,691,440',
'691,905,691,691,691,691,691,691,691,627,691,723,691,575,785,575,575',
'575,575,575,402,402,402,49,49,691,691,691,691,575,691,815,691,767,767',
'672,917,691,815,815,815,917,691,444,815,815,691,815,1009,454,905,575',
'412,412,412,1009,651,651,651,1016,575,575,575,575,1009,457,1016,815',
'815,458,815,815,815,815,815,1016,1053,672,793,793,1071,1071,592,1053',
'592,592,592,467,592,986,477,487,1053,489,986,672,575,490,815,815,815',
'815,815,815,815,815,815,815,815,815,815,815,491,1009,815,815,815,492',
'815,508,592,520,815,487,1016,815,521,487,487,592,815,522,815,523,815',
'815,815,815,815,815,815,1053,815,758,815,758,758,758,539,758,888,540',
'888,888,888,543,888,815,815,816,815,545,815,550,553,140,816,816,816',
'815,140,140,816,816,815,816,507,555,815,562,563,758,564,569,816,502',
'570,573,888,577,758,578,507,507,580,816,816,888,816,816,816,816,816',
'960,581,960,960,960,507,960,507,582,507,507,507,507,591,502,507,599',
'507,502,502,502,502,603,816,816,816,816,816,816,816,816,816,816,816',
'816,816,816,606,503,816,816,816,890,816,890,890,890,816,890,608,816',
'612,613,614,615,816,629,816,632,816,816,816,816,816,816,816,655,816',
'816,816,503,658,664,673,503,503,503,503,678,684,890,692,816,816,693',
'816,696,816,2,2,2,2,2,2,816,699,701,2,2,816,706,708,2,816,2,2,2,2,2',
'2,2,9,9,9,9,9,2,2,2,2,2,2,2,800,800,2,716,800,800,800,447,2,2,2,2,2',
'2,2,2,2,2,2,2,718,2,2,2,721,2,2,724,2,2,2,447,447,447,447,447,447,447',
'447,447,447,447,725,447,447,728,745,447,447,760,2,762,769,2,775,778',
'2,2,488,808,2,810,2,447,812,447,2,447,447,447,447,447,447,447,2,447',
'821,845,849,2,2,2,2,2,2,853,864,865,2,2,488,447,872,447,488,488,2,873',
'874,2,2,2,878,879,2,2,881,882,2,2,36,36,36,36,36,36,884,887,889,36,36',
'892,898,903,36,907,36,36,36,36,36,36,36,315,315,315,315,315,36,36,36',
'36,36,36,36,911,913,36,914,915,925,928,453,36,36,36,36,36,36,36,36,36',
'36,36,36,935,36,36,36,936,36,36,938,36,36,36,453,453,453,453,453,453',
'453,453,453,453,453,939,453,453,940,942,453,453,943,36,944,958,36,959',
'976,36,36,985,989,36,994,36,453,1007,453,36,453,453,453,453,453,453',
'453,36,453,1010,1012,1017,36,36,36,36,36,36,1026,1027,1028,36,36,1029',
'453,1030,1032,1041,1043,36,1046,1047,36,36,36,1048,1049,36,36,1051,1057',
'36,36,224,224,224,224,224,224,1070,1075,1077,224,224,1088,1089,1091',
'224,1097,224,224,224,224,224,224,224,352,352,352,352,352,224,224,224',
'224,224,224,224,1098,1063,224,1063,1063,1063,1102,1063,224,224,224,224',
'224,224,224,224,224,224,224,224,1103,224,224,224,1104,224,224,1105,224',
'224,224,24,24,24,24,24,24,24,24,24,24,24,1113,24,24,,,24,24,,224,,,224',
',,224,224,,,224,,224,24,,24,224,24,24,24,24,24,24,24,224,24,,,,224,224',
'224,224,224,224,,,,224,224,,24,,,,,224,,,224,224,224,,,224,224,,,224',
'224,249,249,249,249,249,249,,,,249,249,,,,249,,249,249,249,249,249,249',
'249,538,538,538,538,538,249,249,249,249,249,249,249,,,249,,,,,,249,249',
'249,249,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249',
'249,297,297,297,297,297,297,297,297,297,297,297,,297,297,,,297,297,',
'249,,,249,,,249,249,,,249,,249,297,,297,249,297,297,297,297,297,297',
'297,249,297,,,,249,249,249,249,249,249,,,,249,249,,297,,,,,249,,,249',
'249,249,,,249,249,,,249,249,318,318,318,318,318,318,,,,318,318,,,,318',
',318,318,318,318,318,318,318,,,,,,318,318,318,318,318,318,318,,,318',
',,,,,318,318,318,318,318,318,318,318,318,318,318,318,,318,318,318,,318',
'318,,318,318,318,506,506,506,506,506,506,506,506,506,506,506,,506,506',
',,506,506,,318,,,318,,,318,318,,,318,,318,506,,506,318,506,506,506,506',
'506,506,506,318,506,,,,318,318,318,318,318,318,,,,318,318,506,506,,',
',,318,,,318,318,318,,,318,318,,,318,318,323,323,323,323,323,323,,,,323',
'323,,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323',
'323,,,323,,,,,,323,323,323,323,323,323,323,323,323,323,323,323,,323',
'323,323,,323,323,,323,323,323,560,560,560,560,560,560,560,560,560,560',
'560,,560,560,,,560,560,,323,,,323,,,323,323,,,323,,323,560,,560,323',
'560,560,560,560,560,560,560,323,560,,,,323,323,323,323,323,323,,,,323',
'323,,560,,,,,323,,,323,323,323,,,323,323,,,323,323,351,351,351,351,351',
'351,,,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351,351',
'351,351,351,351,,,351,,,,,,351,351,351,351,351,351,351,351,351,351,351',
'351,,351,351,351,,351,351,,351,351,351,818,818,818,818,818,818,818,818',
'818,818,818,,818,818,,,818,818,,351,,,351,,,351,351,,,351,,351,818,',
'818,351,818,818,818,818,818,818,818,351,818,,,,351,351,351,351,351,351',
',,,351,351,,818,,,,,351,,,351,351,351,,,351,351,,,351,351,363,363,363',
'363,363,363,,,,363,363,,,,363,,363,363,363,363,363,363,363,,,,,,363',
'363,363,363,363,363,363,,,363,,,,,,363,363,363,363,363,363,363,363,363',
'363,363,363,,363,363,363,,363,363,,363,363,363,934,934,934,934,934,934',
'934,934,934,934,934,,934,934,,,934,934,,363,,,363,,,363,363,,,363,,363',
'934,,934,363,934,934,934,934,934,934,934,363,934,,,,363,363,363,363',
'363,363,,,,363,363,,934,,,,,363,,,363,363,363,,,363,363,,,363,363,364',
'364,364,364,364,364,,,,364,364,,,,364,,364,364,364,364,364,364,364,',
',,,,364,364,364,364,364,364,364,,,364,,,,,,364,364,364,364,364,364,364',
'364,364,364,364,364,,364,364,364,,364,364,,364,364,364,343,343,343,343',
'343,343,343,343,343,343,343,,343,343,,,343,343,,364,,,364,,,364,364',
',,364,,364,343,,343,364,343,343,343,343,343,343,343,364,343,,,,364,364',
'364,364,364,364,,,,364,364,,,,,,,364,,,364,364,364,,,364,364,,,364,364',
'607,607,607,607,607,607,,,,607,607,,,,607,,607,607,607,607,607,607,607',
',,,,,607,607,607,607,607,607,607,,,607,,,,,,607,607,607,607,607,607',
'607,607,607,607,607,607,,607,607,607,,607,607,,607,607,607,344,344,344',
'344,344,344,344,344,344,344,344,,344,344,,,344,344,,607,,,607,,,607',
'607,,,607,,607,344,,344,607,344,344,344,344,344,344,344,607,344,,,,607',
'607,607,607,607,607,,,,607,607,,,,,,,607,,,607,607,607,,,607,607,,,607',
'607,610,610,610,610,610,610,,,,610,610,,,,610,,610,610,610,610,610,610',
'610,,,,,,610,610,610,610,610,610,610,,,610,,,,,,610,610,610,610,610',
'610,610,610,610,610,610,610,,610,610,610,,610,610,,610,610,610,485,485',
'485,485,485,485,485,485,485,485,485,,485,485,,,485,485,,610,,,610,,',
'610,610,,,610,,610,485,,485,610,485,485,485,485,485,485,485,610,485',
',,,610,610,610,610,610,610,,,,610,610,,,,,,,610,,,610,610,610,,,610',
'610,,,610,610,660,660,660,660,660,660,,,,660,660,,,,660,,660,660,660',
'660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,660,660',
'660,660,660,660,660,660,660,660,660,660,,660,660,660,,660,660,,660,660',
'660,486,486,486,486,486,486,486,486,486,486,486,,486,486,,,486,486,',
'660,,,660,,,660,660,,,660,,660,486,,486,660,486,486,486,486,486,486',
'486,660,486,,,,660,660,660,660,660,660,,,,660,660,,,,,,,660,,,660,660',
'660,,,660,660,,,660,660,783,783,783,783,783,783,,,,783,783,,,,783,,783',
'783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,975,783,975',
'975,975,,975,783,783,783,783,783,783,783,783,783,783,783,783,,783,783',
'783,,783,783,,783,783,783,496,496,496,496,496,496,496,,975,496,496,',
',,,,496,496,,783,,,783,,,783,783,,,783,,783,496,,496,783,496,496,496',
'496,496,496,496,783,496,,,,783,783,783,783,783,783,,,,783,783,,,,,,',
'783,,,783,783,783,,,783,783,,,783,783,794,794,794,794,794,794,,,,794',
'794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794,794',
'794,,1031,794,1031,1031,1031,,1031,794,794,794,794,794,794,794,794,794',
'794,794,794,,794,794,794,,794,794,,794,794,794,497,497,497,497,497,497',
'497,,1031,497,497,,,,,,497,497,,794,,,794,,,794,794,,,794,,794,497,',
'497,794,497,497,497,497,497,497,497,794,497,,,,794,794,794,794,794,794',
',,,794,794,,,,,,,794,,,794,794,794,,,794,794,,,794,794,795,795,795,795',
'795,795,,,,795,795,,,,795,,795,795,795,795,795,795,795,,,,,,795,795',
'795,795,795,795,795,,1033,795,1033,1033,1033,,1033,795,795,795,795,795',
'795,795,795,795,795,795,795,,795,795,795,,795,795,,795,795,795,498,498',
'498,498,498,498,498,,1033,498,498,,,,,,498,498,,795,,,795,,,795,795',
',,795,,795,498,,498,795,498,498,498,498,498,498,498,795,498,,,,795,795',
'795,795,795,795,,,,795,795,,,,,,,795,,,795,795,795,,,795,795,,,795,795',
'801,801,801,801,801,801,,,,801,801,,,,801,,801,801,801,801,801,801,801',
',,,,,801,801,801,801,801,801,801,,1069,801,1069,1069,1069,,1069,801',
'801,801,801,801,801,801,801,801,801,801,801,,801,801,801,,801,801,,801',
'801,801,499,499,499,499,499,499,499,,1069,499,499,,,,,,499,499,,801',
',,801,,,801,801,,,801,,801,499,,499,801,499,499,499,499,499,499,499',
'801,499,,,,801,801,801,801,801,801,,,,801,801,,,,,,,801,,,801,801,801',
',,801,801,,,801,801,842,842,842,842,842,842,,,,842,842,,,,842,,842,842',
'842,842,842,842,842,,,,,,842,842,842,842,842,842,842,,,842,,,,,,842',
'842,842,842,842,842,842,842,842,842,842,842,,842,842,842,,842,842,,842',
'842,842,500,500,500,500,500,500,500,,,500,500,,,,,,500,500,,842,,,842',
',,842,842,,,842,,842,500,,500,842,500,500,500,500,500,500,500,842,500',
',,,842,842,842,842,842,842,,,,842,842,,,,,,,842,,,842,842,842,,,842',
'842,,,842,842,862,862,862,862,862,862,,,,862,862,,,,862,,862,862,862',
'862,862,862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,,862,862',
'862,862,862,862,862,862,862,862,862,862,,862,862,862,,862,862,,862,862',
'862,501,501,501,501,501,501,501,,,501,501,,,,,,501,501,,862,,,862,,',
'862,862,,,862,,862,501,,501,862,501,501,501,501,501,501,501,862,501',
',,,862,862,862,862,862,862,,,,862,862,,,,,,,862,,,862,862,862,,,862',
'862,,,862,862,870,870,870,870,870,870,,,,870,870,,,,870,,870,870,870',
'870,870,870,870,,,,,,870,870,870,870,870,870,870,,,870,,,,,,870,870',
'870,870,870,870,870,870,870,870,870,870,,870,870,870,,870,870,,870,870',
'870,504,504,504,504,504,504,504,,,504,504,,,,,,504,504,,870,,,870,,',
'870,870,,,870,,870,504,,504,870,504,504,504,504,504,504,504,870,504',
',,,870,870,870,870,870,870,,,,870,870,,,,,,,870,,,870,870,870,,,870',
'870,,,870,870,871,871,871,871,871,871,,,,871,871,,,,871,,871,871,871',
'871,871,871,871,,,,,,871,871,871,871,871,871,871,,,871,,,,,,871,871',
'871,871,871,871,871,871,871,871,871,871,,871,871,871,,871,871,,871,871',
'871,505,505,505,505,505,505,505,505,,505,505,,,,,,505,505,,871,,,871',
',,871,871,,,871,,871,505,,505,871,505,505,505,505,505,505,505,871,505',
',,,871,871,871,871,871,871,,,,871,871,,,,,,,871,,,871,871,871,,,871',
'871,,,871,871,897,897,897,897,897,897,,,,897,897,,,,897,,897,897,897',
'897,897,897,897,,,,,,897,897,897,897,897,897,897,,,897,,,,,,897,897',
'897,897,897,897,897,897,897,897,897,897,,897,897,897,,897,897,,897,897',
'897,559,,,,,,,,,,,,,,,,559,559,,897,,,897,,495,897,897,,,897,,897,559',
',559,897,559,559,559,559,495,495,559,897,559,,,,897,897,897,897,897',
'897,,,495,897,897,,495,495,495,495,,897,,,897,897,897,,,897,897,,,897',
'897,908,908,908,908,908,908,,,,908,908,,,,908,,908,908,908,908,908,908',
'908,,,,,,908,908,908,908,908,908,908,,,908,,,,,,908,908,908,908,908',
'908,908,908,908,908,908,908,,908,908,908,,908,908,,908,908,908,493,',
',,,,,,,,,,,,,,493,493,,908,,,908,,,908,908,,,908,,908,493,,493,908,493',
'493,493,493,,,,908,,,,,908,908,908,908,908,908,,,,908,908,,,,,,,908',
',,908,908,908,,,908,908,,,908,908,950,950,950,950,950,950,,,,950,950',
',,,950,,950,950,950,950,950,950,950,,,,,,950,950,950,950,950,950,950',
',,950,,,,,,950,950,950,950,950,950,950,950,950,950,950,950,,950,950',
'950,,950,950,,950,950,950,494,,,,,,,,,,,,,,,,494,494,,950,,,950,,,950',
'950,,,950,,950,494,,494,950,494,494,494,494,,,,950,,,,,950,950,950,950',
'950,950,,,,950,950,,,,,,,950,,,950,950,950,,,950,950,,,950,950,952,952',
'952,952,952,952,,,,952,952,,,,952,,952,952,952,952,952,952,952,,,,,',
'952,952,952,952,952,952,952,,,952,,,,,,952,952,952,952,952,952,952,952',
'952,952,952,952,,952,952,952,,952,952,,952,952,952,,,,,,,,,,,,,,,,,',
',,952,,,952,,,952,952,,,952,,952,,,,952,,,,,,,,952,,,,,952,952,952,952',
'952,952,,,,952,952,,,,,,,952,,,952,952,952,,,952,952,,,952,952,982,982',
'982,982,982,982,,,,982,982,,,,982,,982,982,982,982,982,982,982,,,,,',
'982,982,982,982,982,982,982,,,982,,,,,,982,982,982,982,982,982,982,982',
'982,982,982,982,,982,982,982,,982,982,,982,982,982,,,,,,,,,,,,,,,,,',
',,982,,,982,,,982,982,,,982,,982,,,,982,,,,,,,,982,,,,,982,982,982,982',
'982,982,,,,982,982,,,,,,,982,,,982,982,982,,,982,982,,,982,982,1013',
'1013,1013,1013,1013,1013,,,,1013,1013,,,,1013,,1013,1013,1013,1013,1013',
'1013,1013,,,,,,1013,1013,1013,1013,1013,1013,1013,,,1013,,,,,,1013,1013',
'1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,,1013,1013,1013,,1013',
'1013,,1013,1013,1013,,,,,,,,,,,,,,,,,,,,1013,,,1013,,,1013,1013,,,1013',
',1013,,,,1013,,,,,,,,1013,,,,,1013,1013,1013,1013,1013,1013,,,,1013',
'1013,,,,,,,1013,,,1013,1013,1013,,,1013,1013,,,1013,1013,1034,1034,1034',
'1034,1034,1034,,,,1034,1034,,,,1034,,1034,1034,1034,1034,1034,1034,1034',
',,,,,1034,1034,1034,1034,1034,1034,1034,,,1034,,,,,,1034,1034,1034,1034',
'1034,1034,1034,1034,1034,1034,1034,1034,,1034,1034,1034,,1034,1034,',
'1034,1034,1034,,,,,,,,,,,,,,,,,,,,1034,,,1034,,,1034,1034,,,1034,,1034',
',,,1034,,,,,,,,1034,,,,,1034,1034,1034,1034,1034,1034,,,,1034,1034,',
',,,,,1034,,,1034,1034,1034,,,1034,1034,,,1034,1034,1039,1039,1039,1039',
'1039,1039,,,,1039,1039,,,,1039,,1039,1039,1039,1039,1039,1039,1039,',
',,,,1039,1039,1039,1039,1039,1039,1039,,,1039,,,,,,1039,1039,1039,1039',
'1039,1039,1039,1039,1039,1039,1039,1039,,1039,1039,1039,,1039,1039,',
'1039,1039,1039,,,,,,,,,,,,,,,,,,,,1039,,,1039,,,1039,1039,,,1039,,1039',
',,,1039,,,,,,,,1039,,,,,1039,1039,1039,1039,1039,1039,,,,1039,1039,',
',,,,,1039,,,1039,1039,1039,,,1039,1039,,,1039,1039,1042,1042,1042,1042',
'1042,1042,,,,1042,1042,,,,1042,,1042,1042,1042,1042,1042,1042,1042,',
',,,,1042,1042,1042,1042,1042,1042,1042,,,1042,,,,,,1042,1042,1042,1042',
'1042,1042,1042,1042,1042,1042,1042,1042,,1042,1042,1042,,1042,1042,',
'1042,1042,1042,,,,,,,,,,,,,,,,,,,,1042,,,1042,,,1042,1042,,,1042,,1042',
',,,1042,,,,,,,,1042,,,,,1042,1042,1042,1042,1042,1042,,,,1042,1042,',
',,,,,1042,,,1042,1042,1042,,,1042,1042,,,1042,1042,8,8,8,8,8,,,,8,8',
',,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8',
'8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,',
',,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,,,8,8,23,23,23,',
'23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,',
'23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,',
',,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23',
'23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,30,23,23,,,23,23,30,30,30,,,30',
'30,30,750,30,750,750,750,750,750,,,,30,30,30,,,,750,,,,,30,30,,30,30',
'30,30,30,,,,,,,,,,750,,,,,,,,,750,750,750,750,,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,750,30,,30,',
'30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,31,30,,30,,,,31,31',
'31,30,,31,31,31,30,31,,,,,,,,,,31,31,,,,,,,,,31,31,,31,31,31,31,31,',
',,,,,,,,,,,,,,,,,,,,,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31',
'31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31,31,31,31,31,31,,31,,31',
',,,,,,,,,,,,31,31,,31,,31,32,32,32,,32,,31,,32,32,,31,,32,,32,32,32',
'32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32',
'32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32',
'32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32',
',32,32,32,32,,,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33',
'33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33',
'33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33',
',,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,',
'33,33,33,33,,,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34',
'34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34',
'34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34',
',,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,',
'34,34,34,34,,,34,34,,,34,34,44,44,44,,44,,,,44,44,,,,44,,44,44,44,44',
'44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44',
'44,44,,44,44,44,,44,44,,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44',
',,44,,,,,,44,,,,,,,,44,,,,,44,44,44,44,44,44,,,,44,44,,,,,,,44,,,44',
'44,44,,,44,44,,,44,44,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45',
'45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45',
',45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,',
',,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,,,45,45,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,',
',,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47',
'47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,',
'47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47',
'47,,,47,47,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48',
'48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48',
',48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,',
',,,,48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,,',
'48,48,50,50,50,,50,,,,50,50,,,,50,,50,50,50,50,50,50,50,,,,,,50,50,50',
'50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50,50,50,50,,50,50,50,,50,50',
',50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,,50,,,,,,50,,,,,,,,50',
',,,,50,50,50,50,50,50,,,,50,50,,,,,,,50,,,50,50,50,,62,50,50,,,50,50',
'62,62,62,,,62,62,62,752,62,752,752,752,752,752,,,,,62,62,62,,,752,,',
',,62,62,,62,62,62,62,62,,,,,,,,,,752,,,,,,,,,752,752,752,752,,62,62',
'62,62,62,62,62,62,62,62,62,62,62,62,,,62,62,62,,,62,,,62,,,62,62,,62',
'752,62,,62,,62,62,62,62,62,62,62,,62,,62,,,,,,,,,,,,,62,62,62,62,,62',
',62,,,,,62,,,,461,62,64,64,64,64,64,461,461,461,64,64,461,461,461,64',
'461,64,64,64,64,64,64,64,,461,461,461,,64,64,64,64,64,64,64,461,461',
'64,461,461,461,461,461,64,64,,64,64,64,64,64,64,64,64,64,,64,64,64,',
'64,64,,64,64,64,461,461,461,461,461,461,461,461,461,461,461,461,461',
'461,,,461,461,461,64,,461,64,461,461,64,64,461,461,64,461,64,461,,461',
'64,461,461,461,461,461,461,461,64,461,461,461,,64,64,64,64,64,64,,,',
'64,64,461,461,,461,,461,64,,,64,64,64,461,,64,64,,461,64,64,69,69,69',
',69,,,,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,',
',69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,69,69,69,,',
',,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,,,,,69,,,,,,,,69,,,,,69,69,69',
'69,69,69,,,,69,69,,,,,,,69,,,69,69,69,,,69,69,,,69,69,70,70,70,,70,',
',,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,',
',,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,',
',,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70',
'70,,,,70,70,,,,,,,70,,,70,70,70,,,70,70,,,70,70,73,73,73,,73,,,,73,73',
',,,73,,73,73,73,73,73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,,73',
',,73,73,73,73,73,73,73,73,,73,73,73,,73,73,,73,73,73,,,,,,,,,,,,,,,',
',,,,73,,,73,,,73,73,,,73,,,,,,73,,,,,,,,73,,,,,73,73,73,73,73,73,,,',
'73,73,73,,,,,73,73,,,73,73,73,,,73,73,,,73,73,128,128,128,128,128,,',
',128,128,,,,128,,128,128,128,128,128,128,128,,,,,,128,128,128,128,128',
'128,128,,,128,,,,,,128,128,128,128,128,128,128,128,128,128,128,128,',
'128,128,128,,128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128',
'128,,,128,,128,,,,128,,,,,,,,128,,,,,128,128,128,128,128,128,,,,128',
'128,,,,,,128,128,,,128,128,128,,,128,128,,,128,128,133,133,133,,133',
',,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133',
'133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133,133',
'133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133',
',,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,,,,,133',
',,133,133,133,,,133,133,,,133,133,134,134,134,,134,,,,134,134,,,,134',
',134,134,134,134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134',
',,,,,,134,,,134,134,134,134,134,134,134,134,,134,134,134,,134,134,,134',
'134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,',
',134,,,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134',
',,134,134,,,134,134,135,135,135,,135,,,,135,135,,,,135,,135,135,135',
'135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135,,,,,,,135,,,135',
'135,135,135,135,135,135,135,,135,135,135,,135,135,,135,135,135,,,,,',
',,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,,,,,135,,,,,,,,135,,,,,135',
'135,135,135,135,135,,,,135,135,,,,,,,135,,,135,135,135,,,135,135,,,135',
'135,136,136,136,,136,,,,136,136,,,,136,,136,136,136,136,136,136,136',
',,,,,136,136,136,136,136,136,136,,,136,,,,,,,136,,,136,136,136,136,136',
'136,136,136,,136,136,136,,136,136,,136,136,136,,,,,,,,,,,,,,,,,,,,136',
',,136,,,136,136,,,136,,,,,,136,,,,,,,,136,,,,,136,136,136,136,136,136',
',,,136,136,,,,,,,136,,,136,136,136,,,136,136,,,136,136,137,137,137,137',
'137,,,,137,137,,,,137,,137,137,137,137,137,137,137,,,,,,137,137,137',
'137,137,137,137,,,137,,,,,,137,137,,137,137,137,137,137,137,137,137',
'137,,137,137,137,,137,137,,137,137,137,,,,,,,,,,,,,,,,,,,,137,,,137',
',,137,137,,,137,,137,,,,137,,,,,,,,137,,,,,137,137,137,137,137,137,',
',,137,137,,,,,,,137,,,137,137,137,,,137,137,,,137,137,225,225,225,,225',
',,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225',
'225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225',
'225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225',
',225,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,',
'225,,,225,225,225,,,225,225,,,225,225,226,226,226,,226,,,,226,226,,',
',226,,226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,',
',226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226',
',226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,226,,,,226',
',,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226',
'226,,,226,226,,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227',
'227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227',
',,227,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,227',
',,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,',
',227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227,227,,,227,227',
',,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228',
'228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228',
'228,228,228,228,,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,',
',,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228',
'228,228,,,,228,228,,,,,,,228,,,228,228,228,,,228,228,,,228,228,229,229',
'229,,229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229',
'229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229',
',229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229',
'229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229',
',,,,,,229,,,229,229,229,,,229,229,,,229,229,230,230,230,,230,,,,230',
'230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230',
'230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,230,230,230,230',
',230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,',
'230,,230,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,,,,',
',,230,,230,230,230,230,,,230,230,,,230,230,235,235,235,,235,,,,235,235',
',,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235',
',,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235',
'235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235',
',,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235',
'235,,,235,235,,,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236',
',,236,236,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237',
'237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237',
'237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,',
',,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237',
'237,237,,,,237,237,237,,,,,,237,,,237,237,237,,,237,237,,,237,237,248',
'248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248',
',,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248',
'248,,,,,,,248,,,248,248,248,,,248,248,,,248,248,251,251,251,,251,,,',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,',
',,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251',
',,251,251,251,,,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252',
',252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252',
',,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252',
'252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,',
',252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252',
',,252,252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,,,253',
'253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254',
',,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254',
'254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254',
',,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254',
',,,254,254,,,,,,,254,,,254,254,254,,,254,254,,,254,254,255,255,255,',
'255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,,255,255,,,255,255,256,256,256,,256,,,,256,256',
',,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256',
',,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256',
'256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256',
',,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257',
'257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257',
',,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257',
',,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,',
',257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257',
',,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258',
'258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258',
'258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,',
',,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258',
'258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,,,258,258,259,259',
'259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259',
'259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259',
',259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259',
'259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259',
',,,,,,259,,,259,259,259,,,259,259,,,259,259,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,,,260,260,,,260,260,261,261,261,,261,,,,261,261,,,,261',
',261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261',
',,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,,261',
'261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,',
',261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261',
',,261,261,,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262',
'262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262',
'262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,',
',,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262',
'262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,,262,262,,,262',
'262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263',
',,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263',
'263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263',
',,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263',
',,,263,263,,,,,,,263,,,263,263,263,,,263,263,,,263,263,264,264,264,',
'264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,',
',,,264,,,264,264,264,,,264,264,,,264,264,265,265,265,,265,,,,265,265',
',,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265',
',,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265,,265',
'265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265',
',,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265',
'265,,,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266,,266,266',
'266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266',
',,266,266,266,266,266,266,266,266,,266,266,266,,266,266,,266,266,266',
',,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,',
',266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266,,,266,266',
',,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267',
'267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267',
'267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,',
',,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267',
'267,267,,,,267,267,,,,,,,267,,,267,267,267,,,267,267,,,267,267,268,268',
'268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268',
'268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268',
',268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268',
'268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268',
',,,,,,268,,,268,268,268,,,268,268,,,268,268,269,269,269,,269,,,,269',
'269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269',
'269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,',
'269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,',
',,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,',
',269,269,269,,,269,269,,,269,269,270,270,270,,270,,,,270,270,,,,270',
',270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270',
',,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270,,270',
'270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,',
',270,,,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,,,270,270,270',
',,270,270,,,270,270,271,271,271,,271,,,,271,271,,,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,,271,271,271,,271,271,,271,271,271,,,,,',
',,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271',
'271,271,271,271,271,,,,271,271,,,,,,,271,,,271,271,271,,,271,271,,,271',
'271,272,272,272,,272,,,,272,272,,,,272,,272,272,272,272,272,272,272',
',,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272',
'272,272,272,,272,272,272,,272,272,,272,272,272,,,,,,,,,,,,,,,,,,,,272',
',,272,,,272,272,,,272,,,,,,272,,,,,,,,272,,,,,272,272,272,272,272,272',
',,,272,272,,,,,,,272,,,272,272,272,,,272,272,,,272,272,277,277,277,',
'277,,,,277,277,,,,277,,277,277,277,277,277,277,277,,,,,,277,277,277',
'277,277,277,277,,,277,,,,,,,277,,,277,277,277,277,277,277,277,277,,277',
'277,277,,277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277,,,277,277',
',,277,,,,,,277,,,,,,,,277,,,,,277,277,277,277,277,277,,,,277,277,,,',
',,,277,,,277,277,277,,,277,277,,,277,277,285,285,285,,285,,,,285,285',
',,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285',
',,285,,,,,,,285,,,285,285,285,285,285,285,285,285,285,285,285,285,,285',
'285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,285,',
'285,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285,,,,,,,285',
',285,285,285,285,,,285,285,,,285,285,292,292,292,,292,,,,292,292,,,',
'292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,',
'292,,,,,,,292,,,292,292,292,292,292,292,292,292,292,292,292,292,,292',
'292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,',
'292,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,,,,,,,292',
',292,292,292,292,,,292,292,,,292,292,295,295,295,,295,,,,295,295,,,',
'295,,295,295,295,295,295,295,295,,,,,,295,295,295,295,295,295,295,,',
'295,,,,,,,295,,,295,295,295,295,295,295,295,295,295,295,295,295,,295',
'295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,,295,,295,',
'295,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295,295,295,,,,,',
'295,,295,295,295,295,,,295,295,,,295,295,302,302,302,,302,,,,302,302',
',,,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302',
',,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302,,302',
'302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,302',
',,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302,,,,,,,302,,,302,302',
'302,,,302,302,,,302,302,304,304,304,,304,,,,304,304,,,,304,,304,304',
'304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304',
',,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304,304,304',
',,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,',
',304,304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304',
',,304,304,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307,307,307',
'307,,,,,,307,307,307,307,307,307,307,,,307,,,,,,,307,,,307,307,307,307',
'307,307,307,307,,307,307,307,,307,307,,307,307,307,,,,,,,,,,,,,,,,,',
',,307,,,307,,,307,307,,,307,,,,,,307,,,,,,,,307,,,,,307,307,307,307',
'307,307,,,,307,307,,,,,,,307,,,307,307,307,,,307,307,,,307,307,308,308',
'308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308,,,,,,308,308',
'308,308,308,308,308,,,308,,,,,,,308,,,308,308,308,308,308,308,308,308',
',308,308,308,,308,308,,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,,,308',
'308,,,308,,,,,,308,,,,,,,,308,,,,,308,308,308,308,308,308,,,,308,308',
',,,,,,308,,,308,308,308,,,308,308,,,308,308,314,314,314,314,314,,,,314',
'314,,,,314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314,314',
'314,,,314,,,,,,314,314,,314,314,314,314,314,314,314,314,314,,314,314',
'314,,314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314',
',314,,,,314,,,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314,,,,,,',
'314,,,314,314,314,,,314,314,,,314,314,348,348,348,,348,,,,348,348,,',
',348,,348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348,348,',
',348,,,,,,,348,,,348,348,348,348,348,348,348,348,,348,348,348,,348,348',
',348,348,348,,,,,,,,,,,,,,,,,,,,348,,,348,,,348,348,,,348,,,,,,348,',
',,,,,,348,,,,,348,348,348,348,348,348,,,,348,348,,,,,,,348,,,348,348',
'348,,,348,348,,,348,348,350,350,350,,350,,,,350,350,,,,350,,350,350',
'350,350,350,350,350,,,,,,350,350,350,350,350,350,350,,,350,,,,,,,350',
',,350,350,350,350,350,350,350,350,,350,350,350,,350,350,,350,350,350',
',,,,,,,,,,,,,,,,,,,350,,,350,350,,350,350,,,350,,,,,,350,,,,,,,,350',
',,,,350,350,350,350,350,350,,,,350,350,,,,,,,350,,,350,350,350,,,350',
'350,,,350,350,354,354,354,,354,,,,354,354,,,,354,,354,354,354,354,354',
'354,354,,,,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354',
'354,354,354,354,354,354,354,354,354,,354,354,,354,354,354,,,,,,,,,,',
',,,,,,,,,354,,,354,,,354,354,,,354,,354,,,,354,,,,,,,,354,,,,,354,354',
'354,354,354,354,,,,354,354,,,,,,,354,,354,354,354,354,,,354,354,,,354',
'354,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355,355,355',
',,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355,355,355',
'355,355,355,355,355,355,355,,355,355,,355,355,355,,,,,,,,,,,,,,,,,,',
',355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,,,355,355,355,355,355',
'355,,,,355,355,,,,,,,355,,355,355,355,355,,,355,355,,,355,355,362,362',
'362,,362,,,,362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362,362',
'362,362,362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362,362',
',362,362,362,,362,362,,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362',
'362,,,362,,,,,,362,,,,,,,,362,,,,,362,362,362,362,362,362,,,,362,362',
',,,,,,362,,,362,362,362,,,362,362,,,362,362,436,436,436,,436,,,,436',
'436,,,,436,,436,436,436,436,436,436,436,,,,,,436,436,436,436,436,436',
'436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436,,436,436,436,',
'436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,,436,,',
',,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436,,,,,,,436,',
',436,436,436,,470,436,436,,,436,436,470,470,470,,,470,470,470,754,470',
'754,754,754,754,754,,,,470,470,470,470,,,754,,,,,470,470,,470,470,470',
'470,470,,,,,,,,,,754,,,,,,,,,,,754,754,,470,470,470,470,470,470,470',
'470,470,470,470,470,470,470,,,470,470,470,,,470,,,470,,,470,470,,470',
'754,470,,470,,470,470,470,470,470,470,470,,470,470,470,797,,797,797',
'797,797,797,,,,,,470,470,470,470,797,470,471,470,,,,,470,471,471,471',
',470,471,471,471,,471,,,,797,,,,,471,471,471,471,797,797,797,797,,,',
'471,471,,471,471,471,471,471,,,,,,,,,,,,,,,,,,,,,,797,,471,471,471,471',
'471,471,471,471,471,471,471,471,471,471,,,471,471,471,,,471,,,471,,',
'471,471,,471,,471,,471,,471,471,471,471,471,471,471,,471,471,471,,,',
',,,,,,,,,471,471,471,471,,471,,471,,,,,471,,480,480,480,471,480,,,,480',
'480,,,,480,,480,480,480,480,480,480,480,,,,,,480,480,480,480,480,480',
'480,,,480,,,,,,,480,,,480,480,480,480,480,480,480,480,480,480,480,480',
',480,480,,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480,',
'480,,480,,480,,,,,,,,480,,,,,480,480,480,480,480,480,,,,480,480,,,,',
',,480,,480,480,480,480,,,480,480,,,480,480,482,482,482,,482,,,,482,482',
',,,482,,482,482,482,482,482,482,482,,,,,,482,482,482,482,482,482,482',
',,482,,,,,,,482,,,482,482,482,482,482,482,482,482,,482,482,482,,482',
'482,,482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482,482,,,482,,,,,,482',
',,,,,,,482,,,,,482,482,482,482,482,482,,,,482,482,,,,,,,482,,,482,482',
'482,,,482,482,,,482,482,483,483,483,,483,,,,483,483,,,,483,,483,483',
'483,483,483,483,483,,,,,,483,483,483,483,483,483,483,,,483,,,,,,,483',
',,483,483,483,483,483,483,483,483,,483,483,483,,483,483,,483,483,483',
',,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,,483,,,,,,483,,,,,,,,483,,,',
',483,483,483,483,483,483,,,,483,483,,,,,,,483,,,483,483,483,,,483,483',
',,483,483,484,484,484,,484,,,,484,484,,,,484,,484,484,484,484,484,484',
'484,,,,,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484,484,484,484',
'484,484,484,484,,484,484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,',
',,484,,,484,,,484,484,,,484,,,,,,484,,,,,,,,484,,,,,484,484,484,484',
'484,484,,,,484,484,,,,,,,484,,,484,484,484,,510,484,484,,,484,484,510',
'510,510,,,510,510,510,796,510,796,796,796,796,796,,,,510,510,,,,,796',
',,,,510,510,,510,510,510,510,510,,991,,991,991,991,991,991,,796,,,,',
',,,991,796,796,796,796,,,,,,,,,,,,,510,,,,,991,,510,,,,,510,510,991',
'991,991,991,,,796,,,,,,,,,,,796,,,510,510,,,,,,,,,,,,,510,,991,,,510',
'519,519,519,,519,,510,991,519,519,,510,,519,,519,519,519,519,519,519',
'519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519,,,519,519,519,519',
'519,519,519,519,,519,519,519,,519,519,,519,519,519,,,,,,,,,,,,,,,,,',
',,519,,,519,,,519,519,,,519,,,,,,519,,,,,,,,519,,,,,519,519,519,519',
'519,519,,,,519,519,,,,,,,519,,,519,519,519,,,519,519,,,519,519,526,526',
'526,,526,,,,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526',
'526,526,526,526,,526,526,,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,',
',526,526,,,526,,526,,526,,526,,,,,,,,526,,,,,526,526,526,526,526,526',
',,,526,526,,,,,,,526,,526,526,526,526,,,526,526,,,526,526,529,529,529',
',529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,529',
'529,529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529',
'529,,,529,,,,529,,529,,,,,,,,529,,,,,529,529,529,529,529,529,,,,529',
'529,,,,,,,529,,529,529,529,529,,,529,529,,,529,529,531,531,531,,531',
',,,531,531,,,,531,,531,531,531,531,531,531,531,,,,,,531,531,531,531',
'531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531,531,531,,531,531',
'531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531,,,531,531,,,531',
',,,,,531,,,,,,,,531,,,,,531,531,531,531,531,531,,,,531,531,,,,,,,531',
',,531,531,531,,,531,531,,,531,531,537,537,537,537,537,,,,537,537,,,',
'537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537,,',
'537,,,,,,537,537,537,537,537,537,537,537,537,537,537,537,,537,537,537',
',537,537,,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,',
'537,,,,537,,,,,,,,537,,,,,537,537,537,537,537,537,,,,537,537,,,,,,537',
'537,,,537,537,537,,,537,537,,,537,537,546,546,546,,546,,,,546,546,,',
',546,,546,546,546,546,546,546,546,,,,,,546,546,546,546,546,546,546,',
',546,,,,,,,546,,,546,546,546,546,546,546,546,546,546,546,546,546,,546',
'546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,,546,,546,',
'546,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,,,,,,,546',
',546,546,546,546,,,546,546,,,546,546,558,558,558,,558,,,,558,558,,,',
'558,,558,558,558,558,558,558,558,,,,,,558,558,558,558,558,558,558,,',
'558,,,,,,,558,,,558,558,558,558,558,558,558,558,,558,558,558,,558,558',
',558,558,558,,,,,,,,,,,,,,,,,,,,558,,,558,,,558,558,,,558,,,,,,558,',
',,,,,,558,,,,,558,558,558,558,558,558,,,,558,558,,,,,,,558,,,558,558',
'558,,,558,558,,,558,558,561,561,561,,561,,,,561,561,,,,561,,561,561',
'561,561,561,561,561,,,,,,561,561,561,561,561,561,561,,,561,,,,,,,561',
',,561,561,561,561,561,561,561,561,,561,561,561,,561,561,,561,561,561',
',,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,,,,,,561,,,,,,,,561,,,',
',561,561,561,561,561,561,,,,561,561,,,,,,,561,,,561,561,561,,,561,561',
',,561,561,595,595,595,,595,,,,595,595,,,,595,,595,595,595,595,595,595',
'595,,,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595,595,595',
'595,595,595,595,,595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,',
',,595,,,595,,,595,595,,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595',
'595,595,,,,595,595,,,,,,,595,,,595,595,595,,,595,595,,,595,595,618,618',
'618,,618,,,,618,618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618',
'618,618,618,618,618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618',
'618,618,618,618,,618,618,,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,',
',618,618,,,618,,618,,618,,618,,,,,,,,618,,,,,618,618,618,618,618,618',
',,,618,618,,,,,,,618,,618,618,618,618,,,618,618,,,618,618,630,630,630',
',630,,,,630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630,630',
'630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630,,630',
'630,630,,630,630,,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630',
',,630,,,,,,630,,,,,,,,630,,,,,630,630,630,630,630,630,,,,630,630,,,',
',,,630,,,630,630,630,,,630,630,,,630,630,636,636,636,,636,,,,636,636',
',,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636',
',,636,,,,,,,636,,,636,636,636,636,636,636,636,636,,636,636,636,,636',
'636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,,,,,636',
',,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,,636,636',
'636,,,636,636,,,636,636,665,665,665,,665,,,,665,665,,,,665,,665,665',
'665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,,,665',
',,665,665,665,665,665,665,665,665,,665,665,665,,665,665,,665,665,665',
',,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,665,,,,665,,,,,,,,665',
',,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665,665,665,,,665',
'665,,,665,665,666,666,666,,666,,,,666,666,,,,666,,666,666,666,666,666',
'666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666',
'666,666,666,666,666,,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,',
',,,,,,666,,,666,,,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666',
'666,666,666,,,,666,666,,,,,,,666,,,666,666,666,,,666,666,,,666,666,667',
'667,667,,667,,,,667,667,,,,667,,667,667,667,667,667,667,667,,,,,,667',
'667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667,667,667,667',
'667,667,667,667,667,,667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667',
',,667,667,,,667,,667,,667,,667,,,,,,,,667,,,,,667,667,667,667,667,667',
',,,667,667,,,,,,,667,,667,667,667,667,,,667,667,,,667,667,670,670,670',
'670,670,,,,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670',
'670,670,670,670,670,,,670,,,,,,670,670,,670,670,670,670,670,670,670',
'670,670,,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,',
'670,,,670,670,,,670,,670,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670',
',,,670,670,,,,,,,670,,,670,670,670,,,670,670,,,670,670,671,671,671,',
'671,,,,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671',
'671,671,671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671',
'671,671,,671,671,,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671',
',,671,,,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,,,',
',,,671,,,671,671,671,,,671,671,,,671,671,674,674,674,,674,,,,674,674',
',,,674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674',
',,674,,,,,,,674,,,674,674,674,674,674,674,674,674,674,674,674,674,,674',
'674,,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,674,',
'674,,674,,,,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674',
',674,674,674,674,,,674,674,,,674,674,675,675,675,,675,,,,675,675,,,',
'675,,675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675,675,,',
'675,,,,,,,675,,,675,675,675,675,675,675,675,675,675,675,675,675,,675',
'675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,675',
',675,,,,,,,,675,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675,,675',
'675,675,675,,,675,675,,,675,675,676,676,676,,676,,,,676,676,,,,676,',
'676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,',
',,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,676',
'676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,676,,,,,,',
',676,,,,,676,676,676,676,676,676,,,,676,676,,,,,,,676,,,676,676,676',
',,676,676,,,676,676,677,677,677,,677,,,,677,677,,,,677,,677,677,677',
'677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677',
'677,677,677,677,677,677,677,,677,677,677,,677,677,,677,677,677,,,,,',
',,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,677,,,,,677',
'677,677,677,677,677,,,,677,677,,,,,,,677,,,677,677,677,,,677,677,,,677',
'677,682,682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682,682',
',,,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682',
'682,682,682,,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682',
',,682,,,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682',
',,,682,682,,,,,,,682,,,682,682,682,,,682,682,,,682,682,683,683,683,',
'683,,,,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683',
'683,683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683',
'683,683,,683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683',
',,683,,,,,,683,,,,,,,,683,,,,,683,683,683,683,683,683,,,,683,683,,,',
',,,683,,,683,683,683,,,683,683,,,683,683,703,703,703,,703,,,,703,703',
',,,703,,703,703,703,703,703,703,703,,,,,,703,703,703,703,703,703,703',
',,703,,,,,,,703,,,703,703,703,703,703,703,703,703,703,703,703,703,,703',
'703,,703,703,703,,,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,,703,,703,',
'703,,703,,,,,,,,703,,,,,703,703,703,703,703,703,,,,703,703,,,,,,,703',
',703,703,703,703,,,703,703,,,703,703,709,709,709,,709,,,,709,709,,,',
'709,,709,709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709,,',
'709,,,,,,,709,,,709,709,709,709,709,709,709,709,,709,709,709,,709,709',
',709,709,709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,,709,,,,,,709,',
',,,,,,709,,,,,709,709,709,709,709,709,,,,709,709,,,,,,,709,,,709,709',
'709,,,709,709,,,709,709,712,712,712,,712,,,,712,712,,,,712,,712,712',
'712,712,712,712,712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,,712',
',,712,712,712,712,712,712,712,712,,712,712,712,,712,712,,712,712,712',
',,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,,,,,712,,,,,,,,712,,,',
',712,712,712,712,712,712,,,,712,712,,,,,,,712,,,712,712,712,,,712,712',
',,712,712,727,727,727,,727,,,,727,727,,,,727,,727,727,727,727,727,727',
'727,,,,,,727,727,727,727,727,727,727,,,727,,,,,,,727,,,727,727,727,727',
'727,727,727,727,,727,727,727,,727,727,,727,727,727,,,,,,,,,,,,,,,,,',
',,727,,,727,,,727,727,,,727,,,,,,727,,,,,,,,727,,,,,727,727,727,727',
'727,727,,,,727,727,,,,,,,727,,,727,727,727,,,727,727,,,727,727,732,732',
'732,,732,,,,732,732,,,,732,,732,732,732,732,732,732,732,,,,,,732,732',
'732,732,732,732,732,,,732,,,,,,,732,,,732,732,732,732,732,732,732,732',
',732,732,732,,732,732,,732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732',
'732,,,732,,732,,,,732,,,,,,,,732,,,,,732,732,732,732,732,732,,,,732',
'732,,,,,,,732,,,732,732,732,,,732,732,,,732,732,737,737,737,,737,,,',
'737,737,,,,737,,737,737,737,737,737,737,737,,,,,,737,737,737,737,737',
'737,737,,,737,,,,,,,737,,,737,737,737,737,737,737,737,737,737,737,737',
'737,,737,737,,737,737,737,,,,,,,,,,,,,,,,,,,,737,,,737,,,737,737,,,737',
',737,,,,737,,,,,,,,737,,,,,737,737,737,737,737,737,,,,737,737,,,,,,',
'737,,737,737,737,737,,,737,737,,,737,737,740,740,740,,740,,,,740,740',
',,,740,,740,740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740',
',,740,,,,,,,740,,,740,740,740,740,740,740,740,740,740,740,740,740,,740',
'740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,,,,,740',
',,,,,,,740,,,,,740,740,740,740,740,740,,,,740,740,,,,,,,740,,740,740',
'740,740,,,740,740,,,740,740,756,756,756,,756,,,,756,756,,,,756,,756',
'756,756,756,756,756,756,,,,,,756,756,756,756,756,756,756,,,756,,,,,',
',756,,,756,756,756,756,756,756,756,756,,756,756,756,,756,756,,756,756',
'756,,,,,,,,,,,,,,,,,,,,756,,,756,,,756,756,,,756,,,,,,756,,,,,,,,756',
',,,,756,756,756,756,756,756,,,,756,756,,,,,,,756,,,756,756,756,,,756',
'756,,,756,756,777,777,777,,777,,,,777,777,,,,777,,777,777,777,777,777',
'777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,,777,,,777,777,777',
'777,777,777,777,777,,777,777,777,,777,777,,777,777,777,,,,,,,,,,,,,',
',,,,,,777,,,777,,,777,777,,,777,,777,,,,777,,,,,,,,777,,,,,777,777,777',
'777,777,777,,,,777,777,,,,,,,777,,,777,777,777,,,777,777,,,777,777,789',
'789,789,,789,,,,789,789,,,,789,,789,789,789,789,789,789,789,,,,,,789',
'789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789,789,789,789,789',
'789,789,789,789,789,,789,789,,789,789,789,,,,,,,,,,,,,,,,,,,,789,,,789',
',,789,789,,,789,,789,,789,,789,,,,,,,,789,,,,,789,789,789,789,789,789',
',,,789,789,,,,,,,789,,789,789,789,789,,,789,789,,,789,789,811,811,811',
',811,,,,811,811,,,,811,,811,811,811,811,811,811,811,,,,,,811,811,811',
'811,811,811,811,,,811,,,,,,,811,,,811,811,811,811,811,811,811,811,,811',
'811,811,,811,811,,811,811,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811',
',,811,,,,,,811,,,,,,,,811,,,,,811,811,811,811,811,811,,,,811,811,,,',
',,,811,,,811,811,811,,,811,811,,,811,811,819,819,819,,819,,,,819,819',
',,,819,,819,819,819,819,819,819,819,,,,,,819,819,819,819,819,819,819',
',,819,,,,,,,819,,,819,819,819,819,819,819,819,819,,819,819,819,,819',
'819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,,,,,819',
',,,,,,,819,,,,,819,819,819,819,819,819,,,,819,819,,,,,,,819,,,819,819',
'819,,,819,819,,,819,819,832,832,832,,832,,,,832,832,,,,832,,832,832',
'832,832,832,832,832,,,,,,832,832,832,832,832,832,832,,,832,,,,,,,832',
',,832,832,832,832,832,832,832,832,,832,832,832,,832,832,,832,832,832',
',,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,,,,,832,,,,,,,,832,,,',
',832,832,832,832,832,832,,,,832,832,,,,,,,832,,,832,832,832,,,832,832',
',,832,832,833,833,833,,833,,,,833,833,,,,833,,833,833,833,833,833,833',
'833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,,833,,,833,833,833,833',
'833,833,833,833,,833,833,833,,833,833,,833,833,833,,,,,,,,,,,,,,,,,',
',,833,,,833,,,833,833,,,833,,,,,,833,,,,,,,,833,,,,,833,833,833,833',
'833,833,,,,833,833,,,,,,,833,,,833,833,833,,,833,833,,,833,833,834,834',
'834,,834,,,,834,834,,,,834,,834,834,834,834,834,834,834,,,,,,834,834',
'834,834,834,834,834,,,834,,,,,,,834,,,834,834,834,834,834,834,834,834',
',834,834,834,,834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,,834,,,834',
'834,,,834,,,,,,834,,,,,,,,834,,,,,834,834,834,834,834,834,,,,834,834',
',,,,,,834,,,834,834,834,,,834,834,,,834,834,835,835,835,,835,,,,835',
'835,,,,835,,835,835,835,835,835,835,835,,,,,,835,835,835,835,835,835',
'835,,,835,,,,,,,835,,,835,835,835,835,835,835,835,835,,835,835,835,',
'835,835,,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835,,,835,835,,,835,,',
',,,835,,,,,,,,835,,,,,835,835,835,835,835,835,,,,835,835,,,,,,,835,',
',835,835,835,,,835,835,,,835,835,837,837,837,,837,,,,837,837,,,,837',
',837,837,837,837,837,837,837,,,,,,837,837,837,837,837,837,837,,,837',
',,,,,,837,,,837,837,837,837,837,837,837,837,,837,837,837,,837,837,,837',
'837,837,,,,,,,,,,,,,,,,,,,,837,,,837,,,837,837,,,837,,,,,,837,,,,,,',
',837,,,,,837,837,837,837,837,837,,,,837,837,,,,,,,837,,,837,837,837',
',,837,837,,,837,837,895,895,895,,895,,,,895,895,,,,895,,895,895,895',
'895,895,895,895,,,,,,895,895,895,895,895,895,895,,,895,,,,,,,895,,,895',
'895,895,895,895,895,895,895,,895,895,895,,895,895,,895,895,895,,,,,',
',,,,,,,,,,,,,,895,,,895,,,895,895,,,895,,,,,,895,,,,,,,,895,,,,,895',
'895,895,895,895,895,,,,895,895,,,,,,,895,,,895,895,895,,,895,895,,,895',
'895,909,909,909,,909,,,,909,909,,,,909,,909,909,909,909,909,909,909',
',,,,,909,909,909,909,909,909,909,,,909,,,,,,,909,,,909,909,909,909,909',
'909,909,909,,909,909,909,,909,909,,909,909,909,,,,,,,,,,,,,,,,,,,,909',
',,909,,,909,909,,,909,,,,,,909,,,,,,,,909,,,,,909,909,909,909,909,909',
',,,909,909,,,,,,,909,,,909,909,909,,,909,909,,,909,909,932,932,932,',
'932,,,,932,932,,,,932,,932,932,932,932,932,932,932,,,,,,932,932,932',
'932,932,932,932,,,932,,,,,,,932,,,932,932,932,932,932,932,932,932,932',
'932,932,932,,932,932,,932,932,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932',
'932,,,932,,,,932,,932,,,,,,,,932,,,,,932,932,932,932,932,932,,,,932',
'932,,,,,,,932,,932,932,932,932,,,932,932,,,932,932,933,933,933,,933',
',,,933,933,,,,933,,933,933,933,933,933,933,933,,,,,,933,933,933,933',
'933,933,933,,,933,,,,,,,933,,,933,933,933,933,933,933,933,933,,933,933',
'933,,933,933,,933,933,933,,,,,,,,,,,,,,,,,,,,933,,,933,,,933,933,,,933',
',,,,,933,,,,,,,,933,,,,,933,933,933,933,933,933,,,,933,933,,,,,,,933',
',,933,933,933,,,933,933,,,933,933,981,981,981,,981,,,,981,981,,,,981',
',981,981,981,981,981,981,981,,,,,,981,981,981,981,981,981,981,,,981',
',,,,,,981,,,981,981,981,981,981,981,981,981,,981,981,981,,981,981,,981',
'981,981,,,,,,,,,,,,,,,,,,,,981,,,981,,,981,981,,,981,,981,,,,981,,,',
',,,,981,,,,,981,981,981,981,981,981,,,,981,981,,,,,,,981,,,981,981,981',
',,981,981,,,981,981,1058,1058,1058,,1058,,,,1058,1058,,,,1058,,1058',
'1058,1058,1058,1058,1058,1058,,,,,,1058,1058,1058,1058,1058,1058,1058',
',,1058,,,,,,,1058,,,1058,1058,1058,1058,1058,1058,1058,1058,1058,1058',
'1058,1058,,1058,1058,,1058,1058,1058,,,,,,,,,,,,,,,,,,,,1058,,,1058',
',,1058,1058,,,1058,,1058,,1058,,1058,,,,,,,,1058,,,,,1058,1058,1058',
'1058,1058,1058,,,,1058,1058,,,,,,,1058,,1058,1058,1058,1058,,,1058,1058',
',,1058,1058,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37',
'37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37',
',37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,',
',,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38',
',38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,',
',38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,',
',,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38',
',,,38,38,,,,38,,,38,,,38,38,38,,,38,38,74,74,74,,74,,,,74,74,,,,74,',
'74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,,,74,,,,,,,74,,,74,74',
'74,74,74,74,74,74,,74,74,74,,74,74,,,,74,,,,,,,,,,,,,,,,,,,,74,,,74',
',,74,74,,,74,,74,,,,,,,,,,,,,,,,,74,74,74,74,74,74,,,,74,74,,,,,,,74',
',,74,74,74,,,74,74,322,322,322,,322,,,,322,322,,,,322,,322,322,322,322',
'322,322,322,,,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322',
'322,322,322,322,322,322,,322,322,322,,322,322,,,,322,,,,,,,,,,,,,,,',
',,,,322,,,322,,,322,322,,,322,,,,,,,,,,,,,,,,,,,322,322,322,322,322',
'322,,,,322,322,,,,322,,,322,,,322,322,322,,,322,322,339,339,339,,339',
',,,339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339,339,339',
'339,339,339,,,339,,,,,,,339,,,339,339,339,339,339,339,339,339,,339,339',
'339,,339,339,,,,339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339,339,,,339,,,',
',,,,,,,,,,,,,,,339,339,339,339,339,339,,,,339,339,,,,,,,339,,,339,339',
'339,,,339,339,376,376,376,,376,,,,376,376,,,,376,,376,376,376,376,376',
'376,376,,,,,,376,376,376,376,376,376,376,,,376,,,,,,,376,,,376,376,376',
'376,376,376,376,376,,376,376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,',
'376,,,376,,,376,376,,,376,,,,,,,,,,,,,,,,,,,376,376,376,376,376,376',
',,,376,376,,,,,,,376,,,376,376,376,,,376,376,378,378,378,,378,,,,378',
'378,,,,378,,378,378,378,378,378,378,378,,,,,,378,378,378,378,378,378',
'378,,,378,,,,,,,378,,,378,378,378,378,378,378,378,378,,378,378,378,',
'378,378,,,,378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,,378,,,,,,,,',
',,,,,,,,,,378,378,378,378,378,378,,,,378,378,,,,,,,378,,,378,378,378',
',,378,378,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544',
'544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544',
'544,544,544,544,,544,544,544,,544,544,,,,544,,,,,,,,,,,,,,,,,,,,544',
',,544,,,544,544,,,544,,,,,,,,,,,,,,,,,,,544,544,544,544,544,544,,,,544',
'544,,,,,,,544,,,544,544,544,,,544,544,552,552,552,,552,,,,552,552,,',
',552,,552,552,552,552,552,552,552,,,,,,552,552,552,552,552,552,552,',
',552,,,,,,,552,,,552,552,552,552,552,552,552,552,,552,552,552,,552,552',
',,,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,,552,,,,,,,,,,,,,,,,',
',,552,552,552,552,552,552,,,,552,552,,,,,,,552,,,552,552,552,,,552,552',
'715,715,715,,715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,',
',715,715,715,715,715,715,715,,,715,,,,,,,715,,,715,715,715,715,715,715',
'715,715,,715,715,715,,715,715,,,,715,,,,,,,,,,,,,,,,,,,,715,,,715,,',
'715,715,,,715,,,,,,,,,,,,,,,,,,,715,715,715,715,715,715,,,,715,715,',
',,,,,715,,,715,715,715,,,715,715,726,726,726,,726,,,,726,726,,,,726',
',726,726,726,726,726,726,726,,,,,,726,726,726,726,726,726,726,,,726',
',,,,,,726,,,726,726,726,726,726,726,726,726,,726,726,726,,726,726,,',
',726,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,726,,,726,,,,,,,,,,,,,,,,,,',
'726,726,726,726,726,726,,,,726,726,,,,,,,726,,,726,726,726,,,726,726',
'945,945,945,,945,,,,945,945,,,,945,,945,945,945,945,945,945,945,,,,',
',945,945,945,945,945,945,945,,,945,,,,,,,945,,,945,945,945,945,945,945',
'945,945,,945,945,945,,945,945,,,,945,,,,,,,,,,,,,,,,,,,,945,,,945,,',
'945,945,,,945,,,,,,,,,,,,,,,,,,,945,945,945,945,945,945,,,,945,945,',
',,,,,945,,,945,945,945,,,945,945,955,955,955,,955,,,,955,955,,,,955',
',955,955,955,955,955,955,955,,,,,,955,955,955,955,955,955,955,,,955',
',,,,,,955,,,955,955,955,955,955,955,955,955,,955,955,955,,955,955,,',
',955,,,,,,,,,,,,,,,,,,,,955,,,955,,,955,955,,,955,,,,,,,,,,,,,,,,,,',
'955,955,955,955,955,955,,,,955,955,,,,,,,955,,,955,955,955,,,955,955',
'1008,1008,1008,,1008,,,,1008,1008,,,,1008,,1008,1008,1008,1008,1008',
'1008,1008,,,,,,1008,1008,1008,1008,1008,1008,1008,,,1008,,,,,,,1008',
',,1008,1008,1008,1008,1008,1008,1008,1008,,1008,1008,1008,,1008,1008',
',,,1008,,,,,,,,,,,,,,,,,,,,1008,,,1008,,,1008,1008,,,1008,,,,,,,,,,',
',,,,,,,,1008,1008,1008,1008,1008,1008,,,,1008,1008,,,,,,,1008,,,1008',
'1008,1008,,,1008,1008,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11',
'11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11',
'11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11',
'11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12',
'12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12',
'12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,77,77,77,77',
'77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,,,,77,77',
'77,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,77,77,77,77,77,,77',
',,,,,,77,77,,77,77,77,77,77,77,77,,,77,77,,,,77,77,77,77,,,,,,77,,,',
',,,,77,77,,77,77,77,77,77,77,77,77,77,77,77,,,77,,,,,,,,,,,,,,,,,,,',
'77,,,,,77,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,,,,105,105,105,105,105,105,105,105',
'105,105,,,,,,105,105,105,105,105,105,105,105,105,105,105,105,,105,,',
',,,,105,105,,105,105,105,105,105,105,105,,,105,105,,,,105,105,105,105',
',,,,,,,,,,,,,105,105,,105,105,105,105,105,105,105,105,105,105,105,,',
'105,,,,,,,,,,,,,,,,,,,,105,,,,,105,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,,,,427,427',
'427,427,427,427,427,427,427,427,,,,,,427,427,427,427,427,427,427,427',
'427,,,427,,,,,,,,,427,427,,427,427,427,427,427,427,427,,,427,427,,,',
'427,427,427,427,,,,,,,,,,,,,,427,427,,427,427,427,427,427,427,427,427',
'427,427,427,,,427,427,,,,,,,,,,427,,,,,,,,,427,,,,,427,662,662,662,662',
'662,662,662,662,662,662,662,662,662,662,662,662,662,662,662,662,662',
'662,662,662,,,,662,662,662,662,662,662,662,662,662,662,,,,,,662,662',
'662,662,662,662,662,662,662,,,662,,,,,,,,,662,662,,662,662,662,662,662',
'662,662,,,662,662,,,,662,662,662,662,,,,,,,,,,,,,,662,662,,662,662,662',
'662,662,662,662,662,662,662,662,,,662,662,,,,,,,,,,662,,,,,,,,,662,',
',,,662,798,798,798,798,798,798,798,798,798,798,798,798,798,798,798,798',
'798,798,798,798,798,798,798,798,,,,798,798,798,798,798,798,798,798,798',
'798,,,,,,798,798,798,798,798,798,798,798,798,,,798,,,,,,,,,798,798,',
'798,798,798,798,798,798,798,,,798,798,,,,798,798,798,798,,,,,,,,,,,',
',,798,798,,798,798,798,798,798,798,798,798,798,798,798,,,798,,,,,,,',
',,231,231,,,231,,,,,,798,,,231,231,798,231,231,231,231,231,231,231,',
',231,231,,,,231,231,231,231,,,,,,231,,,,,,,,231,231,,231,231,231,231',
'231,231,231,231,231,231,231,,,231,,,,,,,,,,232,232,,,232,,,,,,231,,',
'232,232,231,232,232,232,232,232,232,232,,,232,232,,,,232,232,232,232',
',,,,,232,,,,,,,,232,232,,232,232,232,232,232,232,232,232,232,232,232',
',840,232,840,840,840,840,840,,,,,281,281,,,281,840,,,,,232,,,281,281',
'232,281,281,281,281,281,281,281,,,281,281,840,,,281,281,281,281,,,840',
'840,840,840,,,,,,,,281,281,,281,281,281,281,281,281,281,281,281,281',
'281,,,281,840,,,,,,,,840,478,478,,,478,,,,,,281,,,478,478,281,478,478',
'478,478,478,478,478,,,478,478,,,,478,478,478,478,,,,,,478,,,,,,,,478',
'478,,478,478,478,478,478,478,478,478,478,478,478,,,478,,,,,,,,,,479',
'479,,,479,,,,,,478,,,479,479,478,479,479,479,479,479,479,479,,,479,479',
',,,479,479,479,479,,,,,,479,,,,,,,,479,479,,479,479,479,479,479,479',
'479,479,479,479,479,,,479,,,,,,,,,,547,547,,,547,,,,,,479,,,547,547',
'479,547,547,547,547,547,547,547,,,547,547,,,,547,547,547,547,,,,,,547',
',,,,,,,547,547,,547,547,547,547,547,547,547,547,547,547,547,,,547,,',
',,,,,,,548,548,,,548,,,,,,547,,,548,548,547,548,548,548,548,548,548',
'548,,,548,548,,,,548,548,548,548,,,,,,548,,,,,,,,548,548,,548,548,548',
'548,548,548,548,548,548,548,548,,,548,,,,,,,,,,556,556,,,556,,,,,,548',
',,556,556,548,556,556,556,556,556,556,556,,,556,556,,,,556,556,556,556',
',,,,,556,,,,,,,,556,556,,556,556,556,556,556,556,556,556,556,556,556',
',,556,,,,,,,,,,557,557,,,557,,,,,,556,,,557,557,556,557,557,557,557',
'557,557,557,,,557,557,,,,557,557,557,557,,,,,,557,,,,,,,,557,557,,557',
'557,557,557,557,557,557,557,557,557,557,,,557,,,,,,,,,,619,619,,,619',
',,,,,557,,,619,619,557,619,619,619,619,619,619,619,,,619,619,,,,619',
'619,619,619,,,,,,619,,,,,,,,619,619,,619,619,619,619,619,619,619,619',
'619,619,619,,,619,,,,,,,,,,620,620,,,620,,,,,,619,,,620,620,619,620',
'620,620,620,620,620,620,,,620,620,,,,620,620,620,620,,,,,,620,,,,,,',
',620,620,,620,620,620,620,620,620,620,620,620,620,620,,,620,,,,,,,,',
',668,668,,,668,,,,,,620,,,668,668,620,668,668,668,668,668,668,668,,',
'668,668,,,,668,668,668,668,,,,,,668,,,,,,,,668,668,,668,668,668,668',
'668,668,668,668,668,668,668,,,668,,,,,,,,,,669,669,,,669,,,,,,668,,',
'669,669,668,669,669,669,669,669,669,669,,,669,669,,,,669,669,669,669',
',,,,,669,,,,,,,,669,669,,669,669,669,669,669,669,669,669,669,669,669',
',,669,,,,,,,,,,787,787,,,787,,,,,,669,,,787,787,669,787,787,787,787',
'787,787,787,,,787,787,,,,787,787,787,787,,,,,,787,,,,,,,,787,787,,787',
'787,787,787,787,787,787,787,787,787,787,,,787,,,,,,,,,,788,788,,,788',
',,,,,787,,,788,788,787,788,788,788,788,788,788,788,,,788,788,,,,788',
'788,788,788,,,,,,788,,,,,,,,788,788,,788,788,788,788,788,788,788,788',
'788,788,788,,,788,,,,,,,,,,1054,1054,,,1054,,,,,,788,,,1054,1054,788',
'1054,1054,1054,1054,1054,1054,1054,,,1054,1054,,,,1054,1054,1054,1054',
',,,,,1054,,,,,,,,1054,1054,,1054,1054,1054,1054,1054,1054,1054,1054',
'1054,1054,1054,,,1054,,,,,,,,,,1059,1059,,,1059,,,,,,1054,,,1059,1059',
'1054,1059,1059,1059,1059,1059,1059,1059,,,1059,1059,,,,1059,1059,1059',
'1059,,,,,,1059,,,,,,,,1059,1059,,1059,1059,1059,1059,1059,1059,1059',
'1059,1059,1059,1059,,,1059,965,,965,965,965,965,965,,,1060,1060,,,1060',
',,965,,,1059,,,1060,1060,1059,1060,1060,1060,1060,1060,1060,1060,,,1060',
'1060,,,965,1060,1060,1060,1060,,,,,,1060,965,965,,,,,,1060,1060,,1060',
'1060,1060,1060,1060,1060,1060,1060,1060,1060,1060,,963,1060,963,963',
'963,963,963,,,,,,965,,,,963,,,,,1060,,,,967,1060,967,967,967,967,967',
',,,,,,963,,969,967,969,969,969,969,969,963,963,963,963,,,,,999,969,999',
'999,999,999,999,,967,,,,,,,,999,,,967,967,,,969,,,,1002,963,1002,1002',
'1002,1002,1002,969,969,,,999,,,,,1002,,,,999,999,999,999,,,967,1004',
',1004,1004,1004,1004,1004,,,,,1002,,,969,,1004,,,,1002,1002,1002,1002',
',,,,1064,999,1064,1064,1064,1064,1064,,,1079,1004,1079,1079,1079,1079',
'1079,1064,,,,,1004,1004,,,1079,,1081,1002,1081,1081,1081,1081,1081,',
',,,1064,,,,,1081,,,,1079,,1064,1064,,,,,1004,1079,1079,1079,1079,,,',
',1083,1081,1083,1083,1083,1083,1083,,,,,,1081,1081,,,1083,,1085,1064',
'1085,1085,1085,1085,1085,,,1108,1079,1108,1108,1108,1108,1108,1085,',
',,1083,,,,,1108,,,1081,,,1083,1083,,,,,,1085,,,,,,,,,1108,,1085,1085',
',,,,,,,1108,1108,,,,,,1083,,,,,,,,,,,,,,,,,,1085,,,,,,,,,1108' ]
        racc_action_check = arr = ::Array.new(27402, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    21,  1043,    34,   nil,   -96,   nil,   nil,  5247,  1028,
   nil, 24835, 24973,   -46,   nil,   -47,     6,   573,   103,   203,
   -31,   nil,   -73,  5391,  1333,   191,   nil,   -47,   nil,   200,
  5530,  5658,  5788,  5932,  6076,   nil,  1188, 22875, 23015,   nil,
   101,   327,   454,   189,  6220,  6364,   127,  6508,  6652,   669,
  6796,   136,   428,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  6935,   nil,  7077,   nil,   nil,   -23,   nil,  7221,
  7365,   nil,   nil,  7509, 23155,   193,   nil, 25111,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -64,   nil,   nil,   nil,   nil,   nil,
   nil,   181,   183,   187,   189, 25249,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7653,   nil,
   nil,   nil,   nil,  7797,  7941,  8085,  8229,  8373,   213,   nil,
   865,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   221,   nil,  1333,  8517,  8661,  8805,  8949,  9093,
  9237, 25736, 25809,   nil,   nil,  9381,  9525,  9669,   nil,   nil,
   430,   135,   212,   299,   229,   209,   277,   nil,  9813,  1478,
   288,  9957, 10101, 10245, 10389, 10533, 10677, 10821, 10965, 11109,
 11253, 11397, 11541, 11685, 11829, 11973, 12117, 12261, 12405, 12549,
 12693, 12837, 12981,   nil,   nil,   nil,   nil, 13125,   nil,   nil,
   nil, 25882,   nil,   nil,   283, 13269,   nil,   nil,   294,   nil,
   nil,   nil, 13413,   nil,   nil, 13557,   nil,  1478,   nil,   274,
   308,   nil, 13701,   358, 13845,   nil,   nil, 13989, 14133,   nil,
   nil,   121,   nil,   nil, 14277,  1173,   nil,   307,  1623,   352,
   393,   363, 23295,  1768,   431,   432,   459,   439,   473,   nil,
   412,   386,   -19,   nil,   nil,   nil,   441,   247,   425, 23435,
   nil,   558,   487,  2203,  2348,   497,   nil,   499, 14421,   nil,
 14565,  1913,  1318,   442, 14709, 14853,   nil,   nil,   583,   638,
   -11,    -9, 14997,  2058,  2203,   453,   566,   481,   -19,    21,
   492,   563,    22,   596,   nil,   nil, 23575,   nil, 23715,   -53,
   206,   245,   365,   403,   464,   491,   500,   577,   nil,   592,
   nil,   nil,   nil,   nil,   nil,   302,   nil,   520,   nil,   206,
   nil,   521,   652,   nil,   534,   nil,   563,   -42,   nil,   567,
   -31,   nil,   684,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil, 25387,   nil,   nil,
   nil,   nil,   594,   nil,   nil,   581, 15141,   604,   nil,   nil,
   605,   nil,   528,   239,   753,   nil,   nil,  1043,   nil,   nil,
   nil,   nil,   nil,  1188,   676,   nil,   nil,   689,   693,   567,
   569,  7077,   nil,   nil,   nil,   264,   392,   750,   nil,   nil,
 15280, 15412,   nil,   nil,   nil,   -14,   nil,   752, 25955, 26028,
 15550,   266, 15694, 15838, 15982,  2493,  2638,   777,  1070,   779,
   783,   798,   803,  4088,  4233,  3967,  2783,  2928,  3073,  3218,
  3363,  3508,   871,   927,  3653,  3798,  1623,   862,   863,   nil,
 16121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 16251,
   748,   750,   758,   760,   nil,   nil, 16395,   nil,   nil, 16539,
   nil, 16683,   nil,   172,   nil,   nil,   nil, 16827,  1463,   775,
   775,   nil,   nil,   779, 23855,   788, 16971, 26101, 26174,   591,
   826,   nil, 23995,   788,   nil,   843, 26247, 26320, 17115,  3943,
  1768, 17259,   925,   924,   809,   nil,   nil,   160,   283,   841,
   826,   nil,   329,   852,   nil,   715,   nil,   813,   815,   nil,
   818,   828,   835,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   822,   784,   nil,   nil, 17403,   nil,   nil,   nil,   921,
   nil,   nil,   nil,   927,   nil,   nil,   942,  2348,   993,   nil,
  2493,    35,   998,   999,   993,  1001,   nil,   nil, 17547, 26393,
 26466,    25,   nil,   267,   304,   247,   nil,   619,   nil,   905,
 17691,   nil,   924,   nil,   nil,   nil, 17835,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   300,   nil,
   nil,   688,   nil,   nil,   nil,   892,   nil,   nil,   897,   nil,
  2638,   nil, 25525,   nil,   899, 17979, 18123, 18267, 26539, 26612,
 18411, 18555,   701,   934, 18699, 18843, 18987, 19131,   937,   nil,
   nil,   nil, 19275, 19419,   938,   nil,   nil,   nil,   279,   294,
   520,   652,   911,   912,   nil,   -65,  1015,   -10,   nil,   938,
   nil,  1043,   nil, 19563,   nil,   nil,   927,   nil,   969, 19707,
   nil,   nil, 19851,   nil,   -96, 24135,   953,   nil,   973,    -5,
    23,  1013,    95,   621,  1016,   992, 24275, 19995,  1057,   157,
   220,   nil, 20139,   nil,   nil,   nil,   nil, 20283,   nil,   nil,
 20427,   nil,   nil,   nil,    22,   999,   318,   nil,   nil,   600,
  5494,   nil,  6899,   nil, 15244,   nil, 20571,   nil,   845,   nil,
   999,   267,  1004,   nil,   nil,   nil,   nil,   773,   nil,  1117,
   nil,   nil,   nil,   nil,   nil,  1124,   nil, 20715,  1008,    34,
    35,   156,   167,  2783,   nil,   624,   nil, 26685, 26758, 20859,
   nil,   nil,   nil,   795,  2928,  3073, 16085, 15343, 25663,   161,
  1026,  3218,   nil,   nil,   323,   nil,   nil,   nil,  1025,   nil,
  1011, 21003,  1017,   310,   340,   784,   912,   nil,  1913, 21147,
   nil,  1026,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 21291, 21435, 21579, 21723,   364, 21867,   nil,   nil,
 25871,   nil,  3363,   nil,   nil,  1043,   nil,   -55,   nil,  1031,
   nil,   nil,   nil,  1035,    66,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  3508,   nil,  1036,  1078,   nil,   nil,   414,   nil,
  3653,  3798,  1040,  1050,  1048,   nil,   nil,   nil,  1052,  1053,
   nil,  1056,  1057,   nil,  1066,   nil,   nil,  1070,   852,  1068,
   947,   nil,  1191,   nil,   nil, 22011,   nil,  3943,  1192,   nil,
   nil,    36,    58,  1193,   395,   660,   nil,  1078,  4088, 22155,
   577,  1215,   nil,  1099,  1098,  1102,   nil,   663,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1091,   nil,   nil,  1101,   403,
   nil,   nil, 22299, 22443,  2058,  1115,  1119,   nil,  1122,  1137,
  1140,   nil,  1161,  1147,  1128, 24415,   nil,   nil,   nil,   nil,
  4233,   nil,  4378,   nil,    -8, 24555,   nil,   nil,  1163,  1269,
   905,   nil,   nil, 27039,   nil, 26968,   nil, 27064,   nil, 27079,
   nil,   nil,   nil,   nil,   385,  2769,  1150,   nil,    -1,   nil,
   nil, 22587,  4523,   nil,   nil,  1273,   716,   nil,   nil,  1274,
   nil, 16115,   nil,   nil,  1195,   nil,   348,   nil,   nil, 27094,
   nil,   nil, 27121,   nil, 27148,   nil,   nil,  1179, 24695,   723,
  1245,   nil,  1293,  4668,    50,    51,   734,  1247,    52,   nil,
   nil,   nil,   426,   nil,   nil,   nil,  1180,  1181,  1182,  1185,
  1187,  2914,  1188,  3059,  4813,   nil,    41,   nil,   nil,  4958,
   nil,  1192,  5103,  1190,   nil,   nil,  1192,  1193,  1197,  1198,
   nil,  1201,   nil,   751, 26831,   nil,   nil,  1324, 22731, 26904,
 26977,    53,   nil,  1319, 27176,   nil,   nil,   nil,   nil,  3204,
  1211,   820,   nil,   nil,   nil,  1332,   nil,  1333,   nil, 27185,
   nil, 27203,   nil, 27240,   nil, 27258,   nil,   nil,  1255,  1256,
   nil,  1221,   122,   123,   124,   184,   nil,  1220,  1240,   nil,
   nil,   nil,  1246,  1260,  1264,  1267,   125,   nil, 27267,   nil,
   nil,   nil,   nil,  1282,   nil ]

racc_action_default = [
    -1,  -661,  -660,  -661,    -2,  -647,    -4,    -5,  -661,    -8,
    -9,  -661,  -661,  -661,   -35,  -661,  -661,   -39,  -661,  -661,
  -301,   -51,  -649,  -661,   -56,   -61,   -62,   -63,   -67,  -278,
  -278,  -278,  -316,  -350,  -351,   -79,  -660,   -83,   -91,   -93,
  -661,  -545,  -546,  -661,  -661,  -661,  -661,  -661,  -661,  -235,
  -661,  -649,  -249,  -292,  -293,  -294,  -295,  -296,  -297,  -298,
  -299,  -300,  -633,  -303,  -305,  -312,  -314,  -324,  -430,  -661,
  -661,   -58,   -58,  -647,  -661,  -334,  -341,  -661,  -352,  -353,
  -355,  -356,  -357,  -358,  -359,  -360,  -361,  -362,  -363,  -364,
  -373,  -475,  -476,  -477,  -478,  -479,  -480,  -660,  -483,  -660,
  -660,  -660,  -493,  -660,  -660,  -660,  -521,  -527,  -529,  -530,
  -531,  -532,  -631,  -534,  -535,  -632,  -537,  -538,  -539,  -540,
  -541,  -542,  -543,  -544,  -549,  -550,  1115,    -3,  -648,  -656,
  -657,  -658,    -7,  -661,  -661,  -661,  -661,  -661,  -661,   -23,
  -661,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,
  -204,  -205,   -28,  -131,  -660,  -661,  -661,  -661,  -661,  -661,
  -660,  -661,  -661,  -643,  -644,  -661,  -661,  -649,  -650,   -55,
  -661,  -545,  -546,  -661,  -301,  -661,  -661,  -241,  -661,  -660,
  -661,  -218,  -219,  -661,  -661,  -661,  -661,  -661,  -661,  -661,
  -661,  -661,  -661,  -661,  -661,  -661,  -661,  -661,  -661,  -661,
  -661,  -661,  -661,  -250,  -251,  -252,  -253,  -661,  -366,  -459,
  -438,  -661,  -645,  -646,   -68,  -661,  -323,  -365,  -661,  -452,
  -454,   -74,  -660,  -449,   -75,  -649,   -76,  -256,  -273,  -660,
  -660,  -277,  -661,  -283,  -661,  -660,  -625,  -661,  -661,   -77,
   -78,  -647,   -17,   -18,  -661,   -21,   -22,   -81,  -660,  -649,
  -661,   -84,   -87,  -660,   -99,  -100,  -661,  -661,  -107,  -316,
  -319,  -649,  -442,  -350,  -351,  -354,  -450,  -661,   -89,  -661,
   -95,  -311,  -661,  -220,  -221,  -528,  -229,  -230,  -661,  -242,
  -661,  -660,  -307,  -649,  -660,  -660,  -325,  -326,  -579,   -57,
  -661,  -661,  -661,  -660,  -660,  -647,  -661,  -648,  -545,  -546,
  -661,  -661,  -301,  -661,  -383,  -384,  -661,  -337,  -661,  -122,
  -123,  -165,  -166,  -167,  -183,  -188,  -195,  -198,  -344,  -661,
  -545,  -546,  -620,  -621,  -481,  -661,  -505,  -661,  -507,  -661,
  -509,  -661,  -661,  -488,  -661,  -660,  -661,  -661,  -501,  -661,
  -661,  -503,  -661,  -520,  -522,  -523,  -524,  -525,    -6,  -659,
   -29,   -30,   -31,   -32,   -33,   -10,   -11,  -661,   -25,   -26,
   -27,  -132,  -661,   -36,   -38,  -288,  -661,  -661,  -287,   -37,
  -661,   -40,  -661,  -301,   -48,   -50,  -206,  -261,  -283,   -52,
   -53,   -41,  -207,  -261,  -649,  -268,  -269,  -660,  -660,  -634,
  -635,  -278,  -447,  -636,  -637,  -635,  -634,  -278,  -446,  -448,
  -636,  -637,   -47,  -215,   -54,  -649,  -322,  -661,  -661,  -661,
  -660,  -311,  -661,  -661,  -661,  -216,  -217,  -222,  -223,  -224,
  -225,  -226,  -227,  -231,  -232,  -233,  -234,  -236,  -237,  -238,
  -239,  -240,  -243,  -244,  -245,  -246,  -649,  -254,  -661,  -460,
  -278,  -634,  -635,   -65,   -69,  -279,  -443,  -456,  -459,  -580,
  -649,  -660,  -649,  -649,  -318,  -274,  -661,  -282,  -275,  -661,
  -280,  -661,  -284,  -661,  -628,  -630,   -16,  -648,   -20,  -649,
   -80,  -309,   -96,   -85,  -661,  -649,  -660,  -661,  -661,  -106,
  -661,  -528,  -661,   -92,   -97,  -661,  -661,  -661,  -661,  -255,
  -247,  -661,  -467,  -661,  -649,  -306,  -257,  -653,  -653,  -661,
  -661,  -623,  -653,  -661,  -431,  -579,  -434,  -619,  -619,  -562,
  -564,  -564,  -564,  -578,  -581,  -582,  -583,  -584,  -585,  -586,
  -587,  -588,  -661,  -590,  -592,  -594,  -599,  -601,  -602,  -604,
  -609,  -611,  -612,  -614,  -615,  -616,  -661,  -660,  -374,  -375,
  -660,  -661,  -661,  -661,  -661,  -661,  -369,  -462,  -660,  -661,
  -661,  -311,   -58,  -117,  -118,  -661,  -120,  -661,  -301,  -660,
  -661,  -342,  -557,  -347,  -641,  -642,  -661,  -482,  -506,  -511,
  -512,  -514,  -484,  -508,  -485,  -510,  -486,  -487,  -661,  -490,
  -492,  -661,  -495,  -497,  -498,  -661,  -499,  -500,  -661,  -526,
  -660,   -24,  -661,   -34,  -291,  -661,  -661,  -660,  -661,  -661,
  -661,  -661,  -451,  -661,  -270,  -272,  -661,  -661,   -70,  -266,
  -267,  -444,  -661,  -661,   -72,  -445,  -321,  -651,  -634,  -635,
  -634,  -635,  -649,  -661,  -437,  -660,   -64,  -439,  -456,  -661,
  -457,  -661,  -263,  -270,  -265,  -317,  -660,  -281,  -285,  -661,
  -626,  -627,  -661,   -19,   -82,  -661,   -88,   -94,  -649,  -634,
  -635,  -660,  -638,  -105,  -661,   -90,  -661,  -661,  -228,  -649,
  -660,  -367,  -660,  -304,  -372,  -308,  -258,  -655,  -654,  -260,
  -655,  -313,  -315,  -624,  -661,  -649,  -661,  -560,  -561,  -661,
  -661,  -571,  -661,  -574,  -661,  -576,  -661,  -385,  -661,  -387,
  -389,  -396,  -649,  -593,  -603,  -613,  -617,  -660,  -376,  -660,
   -59,  -377,  -378,  -329,  -330,  -661,  -332,  -661,  -649,  -634,
  -635,  -638,  -310,  -660,  -117,  -118,  -119,  -661,  -661,  -660,
  -335,  -551,  -553,  -338,  -660,  -660,  -579,  -579,  -661,  -649,
  -661,  -660,  -489,  -491,  -661,  -494,  -502,  -504,  -661,  -133,
  -289,  -661,  -649,  -634,  -635,  -635,  -634,   -49,  -262,  -661,
  -652,  -660,   -43,  -209,   -44,  -210,   -71,   -45,  -212,   -46,
  -211,   -73,  -661,  -661,  -661,  -661,  -451,  -661,  -419,  -420,
  -649,  -422,  -660,  -441,  -440,  -661,  -453,  -660,  -455,  -649,
  -276,  -286,  -629,   -86,  -451,   -98,  -214,  -320,   -13,   -15,
  -368,  -370,  -660,  -474,  -468,  -660,  -469,  -470,  -653,  -432,
  -660,  -660,  -424,  -649,  -619,  -600,  -618,  -563,  -564,  -564,
  -591,  -564,  -564,  -610,  -564,  -588,  -605,  -649,  -661,  -394,
  -661,  -589,  -661,  -371,  -379,  -661,  -381,  -660,  -661,   -60,
  -331,  -661,  -451,  -661,  -117,  -118,  -121,  -649,  -660,  -661,
  -661,  -661,  -345,  -649,  -564,  -649,  -580,  -661,  -348,  -622,
  -513,  -516,  -517,  -518,  -519,  -661,  -496,   -12,  -290,  -451,
   -42,  -208,  -271,  -661,  -248,  -619,  -619,  -401,  -660,  -660,
  -660,  -418,  -661,  -649,  -588,  -596,  -597,  -607,  -461,   -66,
  -660,  -264,  -660,  -473,  -661,  -661,  -472,  -259,  -661,  -661,
  -661,  -433,  -559,  -661,  -567,  -661,  -569,  -661,  -572,  -661,
  -575,  -577,  -386,  -388,  -392,  -661,  -397,  -327,  -661,  -382,
  -328,  -661,  -660,  -333,  -451,  -661,  -661,  -339,  -343,  -661,
  -554,  -661,  -556,  -558,  -557,  -515,  -661,  -399,  -400,  -409,
  -403,  -411,  -661,  -414,  -661,  -416,  -421,  -661,  -661,  -595,
  -661,  -458,  -660,  -660,  -545,  -546,  -661,  -661,  -301,  -471,
  -435,  -436,  -649,  -426,  -428,  -429,  -564,  -564,  -564,  -564,
  -390,  -661,  -395,  -661,  -660,  -285,  -660,  -336,  -552,  -660,
  -346,  -649,  -660,  -619,  -598,  -402,  -660,  -660,  -660,  -660,
  -608,  -660,  -423,  -606,  -661,  -311,   -14,  -467,  -660,  -661,
  -661,  -311,  -425,  -661,  -661,  -565,  -568,  -570,  -573,  -661,
  -393,  -660,  -463,  -464,  -465,  -661,  -555,  -661,  -398,  -661,
  -406,  -661,  -408,  -661,  -412,  -661,  -415,  -417,  -310,  -638,
  -466,  -649,  -634,  -635,  -638,  -310,  -427,  -564,  -391,  -380,
  -340,  -349,  -660,  -660,  -660,  -660,  -451,  -566,  -661,  -404,
  -407,  -410,  -413,  -660,  -405 ]

clist = [
'6,454,236,298,298,298,320,280,231,522,388,360,361,615,239,365,282,335',
'335,131,356,293,710,9,144,144,4,528,730,9,707,350,514,707,139,223,591',
'795,414,363,364,452,607,610,359,359,892,473,359,438,439,147,147,898',
'335,127,128,345,321,317,319,563,508,520,883,461,467,149,149,300,300',
'300,576,553,648,420,421,422,423,338,878,699,762,747,748,352,859,131',
'786,880,144,299,299,299,873,396,939,398,400,403,842,408,411,398,973',
'284,291,294,359,359,359,359,132,1050,757,510,736,739,144,672,395,743',
'1023,366,296,309,310,1025,445,397,629,445,631,1,2,412,425,445,138,660',
'858,952,713,222,375,434,427,770,451,9,976,899,281,698,472,643,662,645',
'424,348,649,569,697,392,570,583,357,373,710,790,643,389,633,351,353',
'564,354,355,707,707,376,908,630,910,1039,528,378,794,632,942,1050,989',
'798,994,432,941,943,1022,574,869,358,298,449,450,744,517,518,707,847',
'695,1072,474,475,777,865,954,433,444,394,320,444,399,462,402,651,1096',
'444,405,455,478,1025,407,418,710,410,1032,920,800,19,801,413,909,875',
'1044,19,471,636,,887,973,906,692,950,591,,1046,298,,,240,,775,845,298',
',,298,,240,240,240,,19,326,326,883,,,716,516,757,,,889,437,437,725,',
'320,745,455,1070,1007,320,473,,452,527,527,,19,701,335,396,611,240,240',
',880,240,370,550,461,467,,547,,718,,335,1073,878,300,804,,131,,293,533',
'1098,880,556,300,612,613,538,,359,880,,,317,539,,299,,317,545,551,,1099',
'521,566,571,299,,335,836,335,619,554,536,537,543,19,,,,1056,240,240',
'240,240,19,,,,515,,131,962,721,583,854,,,,523,,778,721,568,572,,,,,',
',1042,,,,652,,,803,,,649,757,,757,567,,614,,957,,,849,,,,880,710,826',
',591,,591,668,831,850,673,,707,,812,,144,997,998,902,,,,,,853,661,298',
'680,721,,527,527,,685,679,19,240,442,240,240,442,240,147,,462,,442,240',
'240,591,591,,929,455,,,,,149,,19,693,,823,825,,,471,,828,830,1030,757',
'753,755,,680,461,467,911,912,,,679,,913,917,,915,,,,298,944,527,,240',
',1090,335,,,,240,,,240,335,,,,729,678,462,856,,,,684,455,,,462,850,1078',
'19,,948,757,19,757,866,,326,19,907,471,803,706,,554,,,445,,471,,984',
'554,,326,,767,445,445,769,959,,982,445,445,696,19,,298,783,757,,,,822',
'824,,240,19,19,827,829,583,583,793,,,,,462,799,627,,627,,455,,985,,',
',721,,,771,,792,,,874,931,,471,,,1013,,298,876,,591,876,,823,825,830',
'828,,,844,,,,,,,444,6,462,1034,,,,,455,,444,444,591,,,673,444,444,144',
',944,843,,944,9,471,1074,808,809,,,,,,817,,838,,335,,,673,,,476,147',
',527,,335,,1041,,,821,680,,,685,240,,149,679,,445,,,936,872,,,863,,867',
'918,,937,,,554,,930,,821,,,,,931,,855,,1075,,,1077,903,,,1106,944,673',
'524,298,,,,,896,879,896,881,,,925,,19,868,,,,,462,326,733,240,540,,',
',455,326,,,437,673,,,964,966,240,968,970,471,971,,,,,,,,,444,144,,,',
',,565,,527,872,,,,,,,,,1091,773,774,953,776,,,901,978,,,958,,,19,,838',
'19,,,,,986,,,240,,940,,,,,,,956,,,240,979,,,359,,240,,,,,,,945,1043',
',,936,359,,936,673,936,876,,,937,721,,937,19,937,,,,,442,240,,,19,,',
',,,442,442,,,,,442,442,1011,,1012,872,987,335,,29,,,,993,,29,,335,1000',
'1000,1000,686,,,,1065,1066,1067,1068,,29,,,326,1036,,,,,29,29,29,,29',
'326,936,,936,,936,,936,,,937,,937,,937,,937,1026,,,,1057,702,,704,705',
'335,29,,,936,900,29,29,,,29,,1038,937,1062,714,1071,1059,,879,,717,863',
',,,1107,1047,,,1048,19,,,,,,240,,,735,298,19,19,,,896,945,,19,945,,882',
'945,884,945,1000,1000,1000,1000,,1000,462,,,29,,442,455,,29,29,29,29',
'29,,,,,471,,896,,673,,471,,,,,19,,,,,,914,,,,,,,,,,,1102,,,19,,1000',
'1000,1000,1000,,,19,19,,,977,1000,,,,,980,,945,,945,983,945,,945,,,',
'938,988,,240,,19,,,,,,,,,,,19,240,,945,,29,29,29,29,29,29,29,,,,,29',
'29,29,,,,,,,,,,,,29,,,,,435,448,1009,,,,,19,,19,,,1016,,857,,1001,1003',
'1005,32,,,,,1037,32,,,1040,,,29,,,,,,,29,19,32,29,,,,,,891,,32,32,32',
',32,,,,,,,29,,,,29,1053,,,,29,19,,1027,,1028,,1029,530,,532,,32,534',
'535,919,,32,32,,,32,19,,,,,19,29,,19,,,,,,,,,29,29,29,1049,,1051,1100',
'240,1101,,,,,,,,1080,1082,1084,1086,,1087,573,,,,951,,,,,,,,,,,32,,',
',,32,32,32,32,32,,,,961,,,,,,,,,,,,,,972,1097,,,,,,,1109,1110,1111,1112',
',,,,1103,,1104,1114,1105,,,,,16,990,,992,,,16,,,,,,,,664,,,,,,1113,',
',,,,,,,29,,,,,16,,,,,,,,,,32,32,32,32,32,32,32,,,,,32,32,32,,,,,16,',
',,,,,32,,,374,,,,,,,,,,,,,,29,,,,,,,,,29,,,,,,,,,708,32,,573,,711,29',
',32,,,32,,,,,,,,,,,16,,,1076,,,,,32,16,,,32,,,,,32,,,,,,,,,,,,,29,,',
'29,,,,,,,,29,,,,32,,763,,,,,,29,,,32,32,32,29,,,,,,,,,,,,,,,,,,,,,,18',
',29,,,,18,,29,29,,,29,,,16,,440,29,29,440,,,,29,29,440,,,,,,,,18,,810',
',,,16,,,,,708,573,,,,,,,,,,,,,,,,18,,,,,,,,,,,,708,,,,,,851,,,852,,',
',,,,,,,32,,,,,,,,,,864,,16,,,708,16,,573,,,16,,,,,,,,,,,29,18,886,,',
',29,,,,18,29,29,,,,,16,29,,,,,448,,32,,,,16,16,,,,32,,29,,,,,,,,,,,',
',32,,,,,,,,928,,29,,,,,,,,,,,,,,,,,,,,29,,,,,,,,29,29,,,,,,,32,,18,32',
'18,,,18,,,,32,,18,,,,29,,29,,,,32,,,,18,,32,29,29,,,,,,,,,,,,,,,,,,',
',,,32,,,,,,32,32,,,32,,,,,,32,32,,29,,29,32,32,,,,,,,573,,,,,,,,,18',
',,,18,,,,,18,,,29,,,,16,,,,,,,,,,,,,,,,,,,,,18,,,1035,,,29,,,,,,18,18',
',,,,,,,,,,,,,29,,,,,29,,,29,,,,,,,20,,,,,32,20,16,,29,16,32,,,,,32,32',
',41,,,,32,,41,,,,,,,,,20,328,328,,,,,32,,,,,,,,,,,,41,324,324,,,,,16',
',20,,32,,440,,,,16,,372,,,,440,440,,,,41,440,440,32,,,,,,,368,32,32',
'390,,,,,,,,,,,,,,,,,,,,,,,32,,32,,,,,,,20,,,,32,32,,,,20,,,,,,,,,18',
'41,,,,,,,,,41,,,,,,,,,,,,,,,,,,32,,32,,,,,,,,,16,,,,,,,,,,,16,16,,,',
',,16,,,32,,,,,,,,,,18,,,18,,440,,,20,,443,,,443,,,,,,443,,32,,,,,,41',
'16,,,,,20,,,,,,,,,32,,,,,32,16,,32,,41,18,,,16,16,,18,,,,18,,,32,,,18',
'18,,,,,18,18,,,,,,,16,,,,,,,,,,,16,,,,20,,,,20,,,,328,20,,,,,,,,,,41',
',,,41,,328,,324,41,,,,,,,,,20,16,,16,,,1019,324,,,,,20,20,,,,,,41,,',
',,,628,,628,,,,41,41,16,,,42,,,,,18,42,,390,,390,,,,,,18,18,,,,,,18',
',,,,16,,,,,,42,325,325,,,,,18,,,,,,,,16,,,,,16,,,16,,,,,42,,18,,,,,',
',,369,,,391,,,,,,,,,18,,,,,,,,18,18,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,',
',,42,,,,18,,,,,42,,,,,,,,,,,,,,,20,,,,,,,328,,,,,,,,328,,,,41,,,18,',
'18,,324,,,,,,,,324,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,20,,42,20,,',
',,,,,,,,,18,,,,41,,,41,,,,,42,,,,,,,,,18,,,,,18,,,18,,,,,,,,,20,,,,',
',443,,,,20,,,,,,443,443,,41,,,443,443,,,,,,41,,,,,,,,,,42,,,,42,,,,325',
'42,,,,,,,328,,,,,,,,,325,,328,,,,,,,,324,,42,,,,,,,,,324,,,42,42,,,',
',,,,,,,,391,,391,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,20,20,,,,,924,20,41',
',,,,,,,,,,41,41,,,,,443,41,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,',
',41,20,,,,,,,,20,20,,,,,,,,,,41,,,,,,,,41,41,,,,,,,20,,,,,,,,,,,20,',
',,,,,,41,,,,,,42,,,,,41,,325,,,,,,,,325,,,,,,,,628,,,,,20,,20,,,1018',
',,,,,,,,390,,,,,41,,41,,,1014,,,,,,,,20,,,,,,,,,,42,,,42,,,,,,41,,,',
',,,628,,,,,20,,,,,,,,,,,,,,390,,,,,41,,20,,,,,20,,,20,,,42,,,,,,,,41',
',42,,,41,,,41,,,,,,,,247,,,,,,,,,297,297,297,,,,,,,,,,343,344,,346,347',
',349,,,,325,,,,,,,,,,,325,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,42,,,,,,,,42,42,,,,,,,,,,,,,,,297',
'447,,,453,297,,,,,453,42,,,,,,,,,,,42,247,,,485,486,487,488,489,490',
'491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,,,,',
'507,,,,,,,391,297,,,,42,,42,297,,1015,297,,,,,,,297,,297,,,297,297,',
',,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,391,559,,560,,42,,297,297,,,',
',,,,,,,,,,,,,,42,,,,,42,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,297,,453',
'453,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,344,,,,,,,297,,,297,,297,',
',,,,,,,,,,,,,297,,,,,,,,,,,,728,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'297,,,,,,,,,,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,297,453,297,,,,818,,,297,297,453,453,,,,,453,453,,,,,,,,,,,',
',,,,,,,,297,,,,,,297,,,297,,,,,,,,,,,,,,,453,,,,,297,,,,,297,,,297,',
',,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,297,,,,,,,,,,,,297,,,,,,,,,,,',
',,,,,,,,,,297,,,,,,,,453,,,,,,,,,,,,,453,453,453,453,,934,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,297,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,297' ]
        racc_goto_table = arr = ::Array.new(4077, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,35,39,45,45,45,14,174,37,88,69,23,23,116,26,23,37,79,79,121,105,87',
'222,9,70,70,2,90,15,9,91,39,51,91,21,21,211,124,69,41,41,76,109,109',
'30,30,110,76,30,28,28,73,73,112,79,5,8,77,62,58,59,12,175,35,217,49',
'49,74,74,86,86,86,173,64,195,23,23,23,23,63,210,52,151,156,156,9,17',
'121,67,212,70,84,84,84,165,6,161,6,6,6,163,6,6,6,149,50,50,50,30,30',
'30,30,7,218,150,49,85,85,70,36,191,85,167,5,57,57,57,168,24,192,68,24',
'68,1,3,192,10,24,11,13,16,18,20,22,25,29,31,42,32,9,152,44,48,54,32',
'196,75,196,9,80,196,83,89,101,104,206,107,118,222,120,196,125,126,127',
'128,129,130,131,91,91,132,133,134,135,136,90,137,138,139,165,218,140',
'141,142,14,153,159,166,169,170,171,45,30,30,172,178,179,91,181,183,184',
'30,30,185,186,187,26,26,190,14,26,193,87,194,197,167,26,198,6,37,168',
'199,7,222,200,152,201,202,34,203,204,205,214,215,34,70,221,,151,149',
'67,35,163,211,,161,45,,,34,,116,52,45,,,45,,34,34,34,,34,34,34,217,',
',64,87,150,,,150,84,84,64,,14,173,6,152,165,14,76,,76,6,6,,34,175,79',
'6,23,34,34,,212,34,34,39,49,49,,37,,35,,79,112,210,86,195,,121,,87,191',
'152,212,37,86,14,14,9,,30,212,,,58,59,,84,,58,59,77,,110,84,6,6,84,',
'79,36,79,37,62,5,8,63,34,,,,17,34,34,34,34,34,,,,57,,121,156,49,206',
'36,,,,57,,35,49,86,86,,,,,,,124,,,,6,,,196,,,196,150,,150,84,,5,,85',
',,88,,,,212,222,51,,211,,211,37,51,90,39,,91,,35,,70,156,156,36,,,,',
',64,21,45,87,49,,6,6,,87,6,34,34,34,34,34,34,34,73,,87,,34,34,34,211',
'211,,36,6,,,,,74,,34,39,,76,76,,,70,,76,76,150,150,209,209,,87,49,49',
'12,12,,,6,,173,173,,88,,,,45,211,6,,34,,15,79,,,,34,,,34,79,,,,30,50',
'87,76,,,,50,6,,,87,90,156,34,,12,150,34,150,28,,34,34,35,70,196,86,',
'62,,,24,,70,,36,62,,34,,14,24,24,14,12,,109,24,24,50,34,,45,41,150,',
',,32,32,,34,34,34,32,32,206,206,30,,,,,87,30,34,,34,,6,,12,,,,49,,,121',
',6,,,155,76,,70,,,109,,45,157,,211,157,,76,76,76,76,,,105,,,,,,,26,6',
'87,109,,,,,6,,26,26,211,,,39,26,26,70,,211,174,,211,9,70,116,2,21,,',
',,,9,,6,,79,,,39,,,60,73,,6,,79,,88,,,86,87,,,87,34,,74,6,,24,,,155',
'39,,,6,,6,69,,157,,,62,,32,,86,,,,,76,,62,,12,,,12,14,,,36,211,39,60',
'45,,,,,6,162,6,162,,,14,,34,86,,,,,87,34,103,34,60,,,,6,34,,,84,39,',
',209,209,34,209,209,70,209,,,,,,,,,26,70,,,,,,60,,6,39,,,,,,,,,35,103',
'103,14,103,,,84,23,,,14,,,34,,6,34,,,,,23,,,34,,162,,,,,,,6,,,34,14',
',,30,,34,,,,,,,213,155,,,155,30,,155,39,155,157,,,157,49,,157,34,157',
',,,,34,34,,,34,,,,,,34,34,,,,,34,34,14,,14,39,121,79,,53,,,,121,,53',
',79,6,6,6,60,,,,209,209,209,209,,53,,,34,14,,,,,53,53,53,,53,34,155',
',155,,155,,155,,,157,,157,,157,,157,162,,,,14,60,,60,60,79,53,,,155',
'103,53,53,,,53,,121,157,39,60,14,37,,162,,60,6,,,,209,162,,,162,34,',
',,,,34,,,60,45,34,34,,,6,213,,34,213,,160,213,160,213,6,6,6,6,,6,87',
',,53,,34,6,,53,53,53,53,53,,,,,70,,6,,39,,70,,,,,34,,,,,,160,,,,,,,',
',,,162,,,34,,6,6,6,6,,,34,34,,,103,6,,,,,103,,213,,213,103,213,,213',
',,,160,103,,34,,34,,,,,,,,,,,34,34,,213,,53,53,53,53,53,53,53,,,,,53',
'53,53,,,,,,,,,,,,53,,,,,82,82,34,,,,,34,,34,,,34,,60,,158,158,158,56',
',,,,103,56,,,103,,,53,,,,,,,53,34,56,53,,,,,,60,,56,56,56,,56,,,,,,',
'53,,,,53,34,,,,53,34,,160,,160,,160,82,,82,,56,82,82,60,,56,56,,,56',
'34,,,,,34,53,,34,,,,,,,,,53,53,53,160,,160,103,34,103,,,,,,,,158,158',
'158,158,,158,82,,,,60,,,,,,,,,,,56,,,,,56,56,56,56,56,,,,60,,,,,,,,',
',,,,,60,160,,,,,,,158,158,158,158,,,,,160,,160,158,160,,,,,27,60,,60',
',,27,,,,,,,,82,,,,,,160,,,,,,,,,53,,,,,27,,,,,,,,,,56,56,56,56,56,56',
'56,,,,,56,56,56,,,,,27,,,,,,,56,,,27,,,,,,,,,,,,,,53,,,,,,,,,53,,,,',
',,,,82,56,,82,,82,53,,56,,,56,,,,,,,,,,,27,,,60,,,,,56,27,,,56,,,,,56',
',,,,,,,,,,,,53,,,53,,,,,,,,53,,,,56,,82,,,,,,53,,,56,56,56,53,,,,,,',
',,,,,,,,,,,,,,,33,,53,,,,33,,53,53,,,53,,,27,,27,53,53,27,,,,53,53,27',
',,,,,,,33,,82,,,,27,,,,,82,82,,,,,,,,,,,,,,,,33,,,,,,,,,,,,82,,,,,,82',
',,82,,,,,,,,,,56,,,,,,,,,,82,,27,,,82,27,,82,,,27,,,,,,,,,,,53,33,82',
',,,53,,,,33,53,53,,,,,27,53,,,,,82,,56,,,,27,27,,,,56,,53,,,,,,,,,,',
',,56,,,,,,,,82,,53,,,,,,,,,,,,,,,,,,,,53,,,,,,,,53,53,,,,,,,56,,33,56',
'33,,,33,,,,56,,33,,,,53,,53,,,,56,,,,33,,56,53,53,,,,,,,,,,,,,,,,,,',
',,,56,,,,,,56,56,,,56,,,,,,56,56,,53,,53,56,56,,,,,,,82,,,,,,,,,33,',
',,33,,,,,33,,,53,,,,27,,,,,,,,,,,,,,,,,,,,,33,,,82,,,53,,,,,,33,33,',
',,,,,,,,,,,,53,,,,,53,,,53,,,,,,,38,,,,,56,38,27,,53,27,56,,,,,56,56',
',65,,,,56,,65,,,,,,,,,38,38,38,,,,,56,,,,,,,,,,,,65,65,65,,,,,27,,38',
',56,,27,,,,27,,38,,,,27,27,,,,65,27,27,56,,,,,,,65,56,56,65,,,,,,,,',
',,,,,,,,,,,,,,56,,56,,,,,,,38,,,,56,56,,,,38,,,,,,,,,33,65,,,,,,,,,65',
',,,,,,,,,,,,,,,,,56,,56,,,,,,,,,27,,,,,,,,,,,27,27,,,,,,27,,,56,,,,',
',,,,,33,,,33,,27,,,38,,38,,,38,,,,,,38,,56,,,,,,65,27,,,,,38,,,,,,,',
',56,,,,,56,27,,56,,65,33,,,27,27,,33,,,,33,,,56,,,33,33,,,,,33,33,,',
',,,,27,,,,,,,,,,,27,,,,38,,,,38,,,,38,38,,,,,,,,,,65,,,,65,,38,,65,65',
',,,,,,,,38,27,,27,,,27,65,,,,,38,38,,,,,,65,,,,,,38,,38,,,,65,65,27',
',,66,,,,,33,66,,65,,65,,,,,,33,33,,,,,,33,,,,,27,,,,,,66,66,66,,,,,33',
',,,,,,,27,,,,,27,,,27,,,,,66,,33,,,,,,,,66,,,66,,,,,,,,,33,,,,,,,,33',
'33,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,66,,,,33,,,,,66,,,,,,,,,,,,,,,38',
',,,,,,38,,,,,,,,38,,,,65,,,33,,33,,65,,,,,,,,65,,,,,,,,,,,,,,,,,,,,33',
',,,,,,,,,,,,,,,38,,66,38,,,,,,,,,,,,33,,,,65,,,65,,,,,66,,,,,,,,,33',
',,,,33,,,33,,,,,,,,,38,,,,,,38,,,,38,,,,,,38,38,,65,,,38,38,,,,,,65',
',,,,,,,,,66,,,,66,,,,66,66,,,,,,,38,,,,,,,,,66,,38,,,,,,,,65,,66,,,',
',,,,,65,,,66,66,,,,,,,,,,,,66,,66,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,38',
'38,,,,,38,38,65,,,,,,,,,,,65,65,,,,,38,65,,,,,,,,,,,,,,,,,,,,,,38,,',
',,,,,,,,,,,,,,,,65,38,,,,,,,,38,38,,,,,,,,,,65,,,,,,,,65,65,,,,,,,38',
',,,,,,,,,,38,,,,,,,,65,,,,,,66,,,,,65,,66,,,,,,,,66,,,,,,,,38,,,,,38',
',38,,,38,,,,,,,,,65,,,,,65,,65,,,65,,,,,,,,38,,,,,,,,,,66,,,66,,,,,',
'65,,,,,,,38,,,,,38,,,,,,,,,,,,,,65,,,,,65,,38,,,,,38,,,38,,,66,,,,,',
',,65,,66,,,65,,,65,,,,,,,,40,,,,,,,,,40,40,40,,,,,,,,,,40,40,,40,40',
',40,,,,66,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,66,,,,,,,,,,,66,66,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,66,,,,,,,,66,66,,,,,,,,,,,,,,,40,40',
',,40,40,,,,,40,66,,,,,,,,,,,66,40,,,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,,,,,40,,,,,,,66,40,,,,66,,66,40,,66',
'40,,,,,,,40,,40,,,40,40,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,66,40',
',40,,66,,40,40,,,,,,,,,,,,,,,,,,66,,,,,66,,,66,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,40,,40,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,40',
',,40,,40,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,40,40,40,,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,',
',,,,40,,,,,,40,,,40,,,,,,,,,,,,,,,40,,,,,40,,,,,40,,,40,,,,,,,,,,,,',
',,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,',
',,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(4077, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   133,    24,   134,   nil,    50,    -2,   104,    51,    21,
    -2,   128,  -290,  -287,   -30,  -534,  -590,  -644,  -717,   nil,
  -395,    23,   131,   -58,   -98,    70,    -9,  1374,  -176,   -80,
   -25,     7,   -81,  1581,   236,  -229,  -335,   -11,  1972,   -20,
  3018,   -32,  -464,   nil,  -619,   -29,   nil,   nil,   125,  -166,
    76,  -252,  -436,   925,  -360,   nil,  1196,    92,    23,    24,
   464,   nil,    21,    41,  -266,  1991,  2357,  -537,  -246,   -67,
    13,   nil,   nil,    40,    56,  -275,  -188,    11,   nil,   -20,
   110,   nil,   954,  -193,    59,  -451,    37,    -9,  -283,  -348,
  -273,  -496,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    86,   nil,   218,  -191,   -47,   nil,    98,   nil,  -318,
  -721,   nil,  -716,   nil,   nil,   nil,  -353,   nil,    93,   nil,
  -460,    14,   nil,   nil,  -595,    94,  -217,   110,   110,  -177,
   111,   111,   105,  -609,  -195,  -610,  -803,   110,  -444,  -200,
  -721,  -441,  -725,   nil,   nil,   nil,   nil,   nil,   nil,  -784,
  -478,  -510,  -740,  -645,   nil,  -116,  -494,  -107,   257,  -644,
   288,  -744,    16,  -595,   nil,  -651,  -763,  -838,  -833,  -160,
  -545,   132,  -370,  -286,   -18,  -217,   nil,   nil,   -84,   -84,
   nil,  -492,   nil,  -300,  -826,  -404,  -518,  -650,   nil,   nil,
   124,    23,    30,   121,   122,  -328,  -242,  -181,   125,   128,
   130,  -564,  -403,  -402,   135,  -550,  -193,   nil,   nil,   -83,
  -670,  -322,  -661,    39,  -504,  -753,   nil,  -688,  -889,   nil,
   nil,  -147,  -507 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   312,     7,   367,   315,
   nil,   nil,   nil,   nil,   562,   nil,   nil,   nil,   nil,   311,
   313,   nil,   nil,   nil,    14,    15,    21,   245,   nil,   nil,
    17,   nil,   441,   246,   342,   nil,   nil,   788,   244,   477,
    24,   nil,   nil,   362,   nil,    25,    26,    27,   nil,   724,
   nil,   nil,   nil,   332,   nil,    28,   329,   456,    35,   nil,
   nil,    37,    40,    39,   nil,   241,   242,   626,   nil,   146,
   464,   145,   148,    92,    93,   nil,   446,   107,    49,    52,
   277,   555,   303,   nil,   457,   nil,   458,   469,   nil,   681,
   525,   301,   285,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    63,   nil,   nil,   286,    67,   nil,    69,   nil,
   nil,    70,   894,    71,    72,    73,   nil,    74,   nil,    75,
   nil,   608,    76,    77,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   290,   279,   732,   862,   617,   895,   759,
   590,   nil,   760,  1045,   935,   578,   nil,   579,   nil,   nil,
   580,   nil,   582,   nil,   839,   nil,   nil,   nil,   588,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   468,   288,   nil,   nil,
   700,   nil,   509,   nil,   nil,   nil,   nil,   nil,    91,    94,
    96,   nil,   nil,   nil,   nil,   nil,   638,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   877,   797,   577,   751,
   581,   885,   593,   595,   596,   946,   599,   600,   947,   603,
   606,   nil,   306 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 151, :_reduce_1,
  2, 149, :_reduce_2,
  2, 150, :_reduce_3,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_6,
  2, 152, :_reduce_none,
  1, 155, :_reduce_none,
  0, 159, :_reduce_9,
  3, 155, :_reduce_10,
  0, 161, :_reduce_11,
  4, 158, :_reduce_12,
  0, 166, :_reduce_13,
  6, 160, :_reduce_14,
  3, 160, :_reduce_15,
  2, 162, :_reduce_16,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_19,
  2, 167, :_reduce_20,
  1, 168, :_reduce_none,
  1, 168, :_reduce_22,
  0, 179, :_reduce_23,
  4, 157, :_reduce_24,
  3, 157, :_reduce_25,
  3, 157, :_reduce_26,
  3, 157, :_reduce_27,
  2, 157, :_reduce_28,
  3, 157, :_reduce_29,
  3, 157, :_reduce_30,
  3, 157, :_reduce_31,
  3, 157, :_reduce_32,
  3, 157, :_reduce_33,
  4, 157, :_reduce_34,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  3, 157, :_reduce_38,
  1, 157, :_reduce_none,
  3, 172, :_reduce_40,
  3, 172, :_reduce_41,
  6, 172, :_reduce_42,
  5, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  3, 172, :_reduce_47,
  1, 180, :_reduce_48,
  3, 180, :_reduce_49,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_52,
  3, 178, :_reduce_53,
  3, 178, :_reduce_54,
  2, 178, :_reduce_55,
  1, 178, :_reduce_none,
  1, 171, :_reduce_57,
  0, 191, :_reduce_58,
  0, 192, :_reduce_59,
  4, 189, :_reduce_60,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_64,
  0, 202, :_reduce_65,
  4, 199, :_reduce_66,
  1, 201, :_reduce_67,
  2, 193, :_reduce_68,
  3, 193, :_reduce_69,
  4, 193, :_reduce_70,
  5, 193, :_reduce_71,
  4, 193, :_reduce_72,
  5, 193, :_reduce_73,
  2, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  2, 193, :_reduce_78,
  1, 173, :_reduce_none,
  3, 173, :_reduce_80,
  1, 207, :_reduce_none,
  3, 207, :_reduce_82,
  1, 206, :_reduce_83,
  2, 206, :_reduce_84,
  3, 206, :_reduce_85,
  5, 206, :_reduce_86,
  2, 206, :_reduce_87,
  4, 206, :_reduce_88,
  2, 206, :_reduce_89,
  4, 206, :_reduce_90,
  1, 206, :_reduce_91,
  3, 206, :_reduce_92,
  1, 210, :_reduce_none,
  3, 210, :_reduce_94,
  2, 209, :_reduce_95,
  3, 209, :_reduce_96,
  1, 212, :_reduce_97,
  3, 212, :_reduce_98,
  1, 211, :_reduce_99,
  1, 211, :_reduce_100,
  4, 211, :_reduce_101,
  3, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  3, 211, :_reduce_105,
  2, 211, :_reduce_106,
  1, 211, :_reduce_107,
  1, 175, :_reduce_108,
  1, 175, :_reduce_109,
  4, 175, :_reduce_110,
  3, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  3, 175, :_reduce_114,
  2, 175, :_reduce_115,
  1, 175, :_reduce_116,
  1, 215, :_reduce_117,
  1, 215, :_reduce_none,
  2, 216, :_reduce_119,
  1, 216, :_reduce_120,
  3, 216, :_reduce_121,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_125,
  1, 217, :_reduce_126,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 169, :_reduce_129,
  1, 169, :_reduce_none,
  1, 170, :_reduce_131,
  0, 223, :_reduce_132,
  4, 170, :_reduce_133,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_206,
  3, 188, :_reduce_207,
  6, 188, :_reduce_208,
  5, 188, :_reduce_209,
  5, 188, :_reduce_210,
  5, 188, :_reduce_211,
  5, 188, :_reduce_212,
  0, 229, :_reduce_213,
  5, 188, :_reduce_214,
  3, 188, :_reduce_215,
  3, 188, :_reduce_216,
  3, 188, :_reduce_217,
  2, 188, :_reduce_218,
  2, 188, :_reduce_219,
  2, 188, :_reduce_220,
  2, 188, :_reduce_221,
  3, 188, :_reduce_222,
  3, 188, :_reduce_223,
  3, 188, :_reduce_224,
  3, 188, :_reduce_225,
  3, 188, :_reduce_226,
  3, 188, :_reduce_227,
  4, 188, :_reduce_228,
  2, 188, :_reduce_229,
  2, 188, :_reduce_230,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  3, 188, :_reduce_234,
  1, 188, :_reduce_none,
  3, 188, :_reduce_236,
  3, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  2, 188, :_reduce_241,
  2, 188, :_reduce_242,
  3, 188, :_reduce_243,
  3, 188, :_reduce_244,
  3, 188, :_reduce_245,
  3, 188, :_reduce_246,
  3, 188, :_reduce_247,
  6, 188, :_reduce_248,
  1, 188, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  3, 226, :_reduce_254,
  3, 226, :_reduce_255,
  1, 230, :_reduce_256,
  1, 231, :_reduce_none,
  2, 231, :_reduce_258,
  4, 231, :_reduce_259,
  2, 231, :_reduce_260,
  1, 224, :_reduce_none,
  3, 224, :_reduce_262,
  3, 235, :_reduce_263,
  5, 235, :_reduce_264,
  3, 235, :_reduce_265,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_270,
  4, 183, :_reduce_271,
  2, 183, :_reduce_272,
  1, 205, :_reduce_273,
  2, 205, :_reduce_274,
  2, 205, :_reduce_275,
  4, 205, :_reduce_276,
  1, 205, :_reduce_277,
  0, 240, :_reduce_278,
  2, 198, :_reduce_279,
  2, 239, :_reduce_280,
  2, 238, :_reduce_281,
  1, 238, :_reduce_none,
  1, 232, :_reduce_283,
  2, 232, :_reduce_284,
  3, 232, :_reduce_285,
  4, 232, :_reduce_286,
  1, 177, :_reduce_287,
  1, 177, :_reduce_288,
  3, 176, :_reduce_289,
  4, 176, :_reduce_290,
  2, 176, :_reduce_291,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_302,
  0, 275, :_reduce_303,
  4, 227, :_reduce_304,
  0, 276, :_reduce_305,
  3, 227, :_reduce_306,
  0, 277, :_reduce_307,
  4, 227, :_reduce_308,
  3, 227, :_reduce_309,
  3, 227, :_reduce_310,
  2, 227, :_reduce_311,
  0, 278, :_reduce_312,
  4, 227, :_reduce_313,
  0, 279, :_reduce_314,
  4, 227, :_reduce_315,
  1, 227, :_reduce_316,
  4, 227, :_reduce_317,
  3, 227, :_reduce_318,
  1, 227, :_reduce_319,
  5, 227, :_reduce_320,
  4, 227, :_reduce_321,
  3, 227, :_reduce_322,
  2, 227, :_reduce_323,
  1, 227, :_reduce_none,
  2, 227, :_reduce_325,
  2, 227, :_reduce_326,
  6, 227, :_reduce_327,
  6, 227, :_reduce_328,
  4, 227, :_reduce_329,
  4, 227, :_reduce_330,
  5, 227, :_reduce_331,
  4, 227, :_reduce_332,
  6, 227, :_reduce_333,
  0, 280, :_reduce_334,
  0, 281, :_reduce_335,
  7, 227, :_reduce_336,
  0, 282, :_reduce_337,
  0, 283, :_reduce_338,
  0, 284, :_reduce_339,
  9, 227, :_reduce_340,
  0, 285, :_reduce_341,
  0, 286, :_reduce_342,
  6, 227, :_reduce_343,
  0, 287, :_reduce_344,
  0, 288, :_reduce_345,
  7, 227, :_reduce_346,
  0, 289, :_reduce_347,
  0, 290, :_reduce_348,
  9, 227, :_reduce_349,
  1, 227, :_reduce_350,
  1, 227, :_reduce_351,
  1, 227, :_reduce_352,
  1, 227, :_reduce_353,
  1, 182, :_reduce_354,
  1, 250, :_reduce_none,
  1, 256, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 265, :_reduce_none,
  1, 267, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 293, :_reduce_none,
  1, 294, :_reduce_none,
  1, 295, :_reduce_none,
  1, 164, :_reduce_none,
  1, 296, :_reduce_none,
  1, 251, :_reduce_none,
  1, 204, :_reduce_none,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  2, 257, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 258, :_reduce_none,
  5, 258, :_reduce_380,
  1, 260, :_reduce_none,
  2, 260, :_reduce_382,
  1, 266, :_reduce_none,
  1, 266, :_reduce_384,
  1, 297, :_reduce_none,
  3, 297, :_reduce_386,
  1, 300, :_reduce_387,
  3, 300, :_reduce_388,
  1, 299, :_reduce_389,
  4, 299, :_reduce_390,
  6, 299, :_reduce_391,
  3, 299, :_reduce_392,
  5, 299, :_reduce_393,
  2, 299, :_reduce_394,
  4, 299, :_reduce_395,
  1, 299, :_reduce_396,
  3, 299, :_reduce_397,
  4, 301, :_reduce_398,
  2, 301, :_reduce_399,
  2, 301, :_reduce_400,
  1, 301, :_reduce_401,
  2, 306, :_reduce_402,
  1, 306, :_reduce_none,
  6, 307, :_reduce_404,
  8, 307, :_reduce_405,
  4, 307, :_reduce_406,
  6, 307, :_reduce_407,
  4, 307, :_reduce_408,
  2, 307, :_reduce_409,
  6, 307, :_reduce_410,
  2, 307, :_reduce_411,
  4, 307, :_reduce_412,
  6, 307, :_reduce_413,
  2, 307, :_reduce_414,
  4, 307, :_reduce_415,
  2, 307, :_reduce_416,
  4, 307, :_reduce_417,
  1, 307, :_reduce_418,
  1, 311, :_reduce_419,
  1, 311, :_reduce_420,
  3, 312, :_reduce_421,
  1, 312, :_reduce_422,
  4, 312, :_reduce_423,
  1, 313, :_reduce_none,
  4, 313, :_reduce_425,
  1, 314, :_reduce_426,
  3, 314, :_reduce_427,
  1, 315, :_reduce_428,
  1, 315, :_reduce_none,
  0, 319, :_reduce_430,
  0, 320, :_reduce_431,
  4, 255, :_reduce_432,
  4, 317, :_reduce_433,
  1, 317, :_reduce_434,
  3, 318, :_reduce_435,
  3, 318, :_reduce_436,
  3, 322, :_reduce_437,
  2, 195, :_reduce_438,
  4, 195, :_reduce_439,
  5, 195, :_reduce_440,
  5, 195, :_reduce_441,
  0, 325, :_reduce_442,
  3, 254, :_reduce_443,
  4, 254, :_reduce_444,
  4, 254, :_reduce_445,
  3, 254, :_reduce_446,
  3, 254, :_reduce_447,
  3, 254, :_reduce_448,
  2, 254, :_reduce_449,
  1, 254, :_reduce_450,
  4, 254, :_reduce_451,
  0, 326, :_reduce_452,
  4, 253, :_reduce_453,
  0, 327, :_reduce_454,
  4, 253, :_reduce_455,
  0, 328, :_reduce_456,
  0, 329, :_reduce_457,
  4, 200, :_reduce_458,
  0, 330, :_reduce_459,
  0, 331, :_reduce_460,
  4, 323, :_reduce_461,
  0, 333, :_reduce_462,
  6, 264, :_reduce_463,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  6, 163, :_reduce_466,
  0, 163, :_reduce_467,
  1, 334, :_reduce_468,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  2, 335, :_reduce_471,
  1, 335, :_reduce_none,
  2, 165, :_reduce_473,
  1, 165, :_reduce_none,
  1, 241, :_reduce_475,
  1, 241, :_reduce_476,
  1, 241, :_reduce_none,
  1, 242, :_reduce_478,
  1, 337, :_reduce_479,
  1, 337, :_reduce_none,
  2, 337, :_reduce_481,
  3, 338, :_reduce_482,
  1, 338, :_reduce_483,
  3, 243, :_reduce_484,
  3, 244, :_reduce_485,
  3, 245, :_reduce_486,
  3, 245, :_reduce_487,
  1, 342, :_reduce_488,
  3, 342, :_reduce_489,
  1, 343, :_reduce_none,
  2, 343, :_reduce_491,
  3, 247, :_reduce_492,
  0, 346, :_reduce_493,
  4, 247, :_reduce_494,
  1, 345, :_reduce_495,
  3, 345, :_reduce_496,
  3, 246, :_reduce_497,
  3, 246, :_reduce_498,
  3, 248, :_reduce_499,
  3, 248, :_reduce_500,
  1, 347, :_reduce_501,
  3, 347, :_reduce_502,
  1, 348, :_reduce_503,
  3, 348, :_reduce_504,
  1, 339, :_reduce_505,
  2, 339, :_reduce_506,
  1, 340, :_reduce_507,
  2, 340, :_reduce_508,
  1, 341, :_reduce_509,
  2, 341, :_reduce_510,
  1, 344, :_reduce_511,
  0, 350, :_reduce_512,
  3, 344, :_reduce_513,
  0, 351, :_reduce_514,
  4, 344, :_reduce_515,
  1, 349, :_reduce_516,
  1, 349, :_reduce_517,
  1, 349, :_reduce_518,
  1, 349, :_reduce_none,
  2, 221, :_reduce_520,
  1, 221, :_reduce_521,
  1, 352, :_reduce_none,
  1, 352, :_reduce_none,
  1, 352, :_reduce_none,
  1, 352, :_reduce_none,
  3, 222, :_reduce_526,
  1, 336, :_reduce_none,
  2, 336, :_reduce_528,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_538,
  1, 214, :_reduce_539,
  1, 214, :_reduce_540,
  1, 214, :_reduce_541,
  1, 214, :_reduce_542,
  1, 214, :_reduce_543,
  1, 214, :_reduce_544,
  1, 249, :_reduce_545,
  1, 249, :_reduce_546,
  1, 181, :_reduce_547,
  1, 181, :_reduce_548,
  1, 186, :_reduce_549,
  1, 186, :_reduce_550,
  0, 353, :_reduce_551,
  4, 268, :_reduce_552,
  1, 268, :_reduce_553,
  3, 272, :_reduce_554,
  5, 272, :_reduce_555,
  3, 272, :_reduce_556,
  0, 355, :_reduce_557,
  3, 272, :_reduce_558,
  4, 354, :_reduce_559,
  2, 354, :_reduce_560,
  2, 354, :_reduce_561,
  1, 354, :_reduce_none,
  2, 357, :_reduce_563,
  0, 357, :_reduce_564,
  6, 321, :_reduce_565,
  8, 321, :_reduce_566,
  4, 321, :_reduce_567,
  6, 321, :_reduce_568,
  4, 321, :_reduce_569,
  6, 321, :_reduce_570,
  2, 321, :_reduce_571,
  4, 321, :_reduce_572,
  6, 321, :_reduce_573,
  2, 321, :_reduce_574,
  4, 321, :_reduce_575,
  2, 321, :_reduce_576,
  4, 321, :_reduce_577,
  1, 321, :_reduce_578,
  0, 321, :_reduce_579,
  1, 236, :_reduce_580,
  1, 316, :_reduce_581,
  1, 316, :_reduce_582,
  1, 316, :_reduce_583,
  1, 316, :_reduce_584,
  1, 298, :_reduce_none,
  1, 298, :_reduce_586,
  1, 359, :_reduce_none,
  1, 360, :_reduce_none,
  3, 360, :_reduce_589,
  1, 308, :_reduce_590,
  3, 308, :_reduce_591,
  1, 361, :_reduce_none,
  2, 362, :_reduce_593,
  1, 362, :_reduce_594,
  2, 363, :_reduce_595,
  1, 363, :_reduce_596,
  1, 302, :_reduce_none,
  3, 302, :_reduce_598,
  1, 356, :_reduce_none,
  3, 356, :_reduce_600,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 303, :_reduce_603,
  1, 303, :_reduce_604,
  3, 365, :_reduce_605,
  3, 366, :_reduce_606,
  1, 309, :_reduce_607,
  3, 309, :_reduce_608,
  1, 358, :_reduce_609,
  3, 358, :_reduce_610,
  1, 367, :_reduce_none,
  1, 367, :_reduce_none,
  2, 310, :_reduce_613,
  1, 310, :_reduce_614,
  1, 368, :_reduce_none,
  1, 368, :_reduce_none,
  2, 305, :_reduce_617,
  2, 304, :_reduce_618,
  0, 304, :_reduce_619,
  1, 273, :_reduce_none,
  0, 369, :_reduce_621,
  4, 273, :_reduce_622,
  1, 252, :_reduce_623,
  2, 252, :_reduce_none,
  1, 234, :_reduce_none,
  3, 234, :_reduce_626,
  3, 370, :_reduce_627,
  2, 370, :_reduce_628,
  4, 370, :_reduce_629,
  2, 370, :_reduce_630,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 269, :_reduce_656,
  1, 269, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_659,
  0, 154, :_reduce_660 ]

racc_reduce_n = 661

racc_shift_n = 1115

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145,
  :tLOWEST => 146,
  :tEQL => 147 }

racc_nt_base = 148

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tBDOT2",
  "tBDOT3",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_49(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_103(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_109(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_114(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_121(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_211(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_218(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot2, v1, v2).line v1.line

    result
end

def _reduce_219(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot3, v1, v2).line v1.line

    result
end

def _reduce_220(val, _values, result)
                      _, v2, = val
                      v1 = nil

                      result = s(:dot2, v1, v2).line v2.line

    result
end

def _reduce_221(val, _values, result)
                      _, v2 = val
                      v1 = nil

                      result = s(:dot3, v1, v2).line v2.line

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_237(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_238(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_240(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_241(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_242(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_243(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_244(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_245(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_246(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_247(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_248(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_255(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_256(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_259(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_260(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_263(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

def _reduce_264(val, _values, result)
                      yyerror "Unexpected ..." unless
                        self.lexer.is_local_id(:"*")  &&
                        self.lexer.is_local_id(:"**") &&
                        self.lexer.is_local_id(:"&")

                      result = call_args val

    result
end

def _reduce_265(val, _values, result)
                      yyerror "Unexpected ..." unless
                        self.lexer.is_local_id(:"*")  &&
                        self.lexer.is_local_id(:"**") &&
                        self.lexer.is_local_id(:"&")

                      result = call_args val

    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

def _reduce_270(val, _values, result)
                      result = args val

    result
end

def _reduce_271(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_272(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_273(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_274(val, _values, result)
                      result = call_args val

    result
end

def _reduce_275(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_276(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_277(val, _values, result)
                      result = call_args val

    result
end

def _reduce_278(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_279(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_280(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_281(val, _values, result)
                      result = val[1]

    result
end

# reduce 282 omitted

def _reduce_283(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_285(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_286(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_287(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_288(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_289(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_290(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_291(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_303(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_304(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_305(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_306(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_307(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_308(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_309(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_310(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_311(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_312(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_313(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_314(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_315(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_316(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_317(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_318(val, _values, result)
                      result = new_yield

    result
end

def _reduce_319(val, _values, result)
                      result = new_yield

    result
end

def _reduce_320(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_321(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_322(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_323(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 324 omitted

def _reduce_325(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_326(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_327(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_328(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_329(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_330(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_331(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_332(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_333(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_338(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_339(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_340(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_341(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_342(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_343(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_344(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_345(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_346(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_347(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_348(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_349(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_350(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_351(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_352(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_353(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_354(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

# reduce 373 omitted

# reduce 374 omitted

# reduce 375 omitted

# reduce 376 omitted

# reduce 377 omitted

# reduce 378 omitted

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = val[1]

    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = val[1]

    result
end

def _reduce_387(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_388(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_389(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_390(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_391(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_392(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_393(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_394(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_395(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_396(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_397(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_398(val, _values, result)
                      result = call_args val

    result
end

def _reduce_399(val, _values, result)
                      result = call_args val

    result
end

def _reduce_400(val, _values, result)
                      result = call_args val

    result
end

def _reduce_401(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

# reduce 403 omitted

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      result = args val

    result
end

def _reduce_417(val, _values, result)
                      result = args val

    result
end

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
 result = 0
    result
end

def _reduce_420(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_421(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_422(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_423(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      result = args val

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = args val

    result
end

def _reduce_428(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_431(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_432(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_433(val, _values, result)
                      result = args val

    result
end

def _reduce_434(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_435(val, _values, result)
                      result = val[1]

    result
end

def _reduce_436(val, _values, result)
                      result = val[1]

    result
end

def _reduce_437(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_438(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_440(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_441(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_442(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_443(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_445(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_446(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_447(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_448(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_449(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_450(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_451(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_452(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_453(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_454(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_455(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_456(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_457(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_458(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_459(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_460(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_461(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_462(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_463(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 464 omitted

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_467(val, _values, result)
                      result = nil

    result
end

def _reduce_468(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 469 omitted

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      result = val[1]

    result
end

# reduce 472 omitted

def _reduce_473(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_476(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_479(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_482(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_483(val, _values, result)
                      result = new_string val

    result
end

def _reduce_484(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_485(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_486(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_487(val, _values, result)
                      result = val[1]

    result
end

def _reduce_488(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_489(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_493(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_494(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_495(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_496(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_497(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_498(val, _values, result)
                      result = val[1]

    result
end

def _reduce_499(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_500(val, _values, result)
                      result = val[1]

    result
end

def _reduce_501(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_502(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_503(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_504(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_505(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_506(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_507(val, _values, result)
                      result = nil

    result
end

def _reduce_508(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_509(val, _values, result)
                      result = nil

    result
end

def _reduce_510(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_511(val, _values, result)
                      result = new_string val

    result
end

def _reduce_512(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_513(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_514(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_515(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_516(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_517(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_518(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_521(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 527 omitted

def _reduce_528(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

def _reduce_538(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_539(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_540(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_541(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_542(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_543(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_545(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_546(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_547(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_548(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_549(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_550(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_551(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_552(val, _values, result)
                      result = val[2]

    result
end

def _reduce_553(val, _values, result)
                      result = nil

    result
end

def _reduce_554(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_555(val, _values, result)
                      result = args val

                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_556(val, _values, result)
                      result = args val

                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_557(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_558(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      result = val[1]

    result
end

def _reduce_564(val, _values, result)
                      result = nil

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      result = args val

    result
end

def _reduce_572(val, _values, result)
                      result = args val

    result
end

def _reduce_573(val, _values, result)
                      result = args val

    result
end

def _reduce_574(val, _values, result)
                      result = args val

    result
end

def _reduce_575(val, _values, result)
                      result = args val

    result
end

def _reduce_576(val, _values, result)
                      result = args val

    result
end

def _reduce_577(val, _values, result)
                      result = args val

    result
end

def _reduce_578(val, _values, result)
                      result = args val

    result
end

def _reduce_579(val, _values, result)
                      result = args val

    result
end

def _reduce_580(val, _values, result)
                      result = s(:forward_args).line lexer.lineno

    result
end

def _reduce_581(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_582(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_583(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_584(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 587 omitted

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      result = val[1]

    result
end

def _reduce_590(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_591(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_594(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_595(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_596(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 597 omitted

def _reduce_598(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      result = args val

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_604(val, _values, result)
                      result = :"**"
                      self.env[result] = :lvar

    result
end

def _reduce_605(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_606(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_607(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_608(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_609(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_610(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 611 omitted

# reduce 612 omitted

def _reduce_613(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_614(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 615 omitted

# reduce 616 omitted

def _reduce_617(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_618(val, _values, result)
                      result = val[1]

    result
end

def _reduce_619(val, _values, result)
                      result = nil

    result
end

# reduce 620 omitted

def _reduce_621(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_622(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_623(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 624 omitted

# reduce 625 omitted

def _reduce_626(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_627(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_628(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_629(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_630(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

# reduce 646 omitted

# reduce 647 omitted

# reduce 648 omitted

# reduce 649 omitted

# reduce 650 omitted

# reduce 651 omitted

# reduce 652 omitted

# reduce 653 omitted

# reduce 654 omitted

# reduce 655 omitted

def _reduce_656(val, _values, result)
 yyerrok
    result
end

# reduce 657 omitted

# reduce 658 omitted

def _reduce_659(val, _values, result)
 yyerrok
    result
end

def _reduce_660(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby27Parser
